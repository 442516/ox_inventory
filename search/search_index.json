{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Danger Not ready for production servers - this resource is still being developed This resource is being designed with the intention of providing advanced functionality while remaining easy to use, however it is not recommended for beginners. You must possess a basic understanding of coding and the ability to read documentation ; otherwise you should not install this resource. Requirements \u00b6 OxMySQL \u00b6 Our spin on a database wrapper utilising node-mysql2 , providing improved performance and enhanced features. Improved performance and compatibility Resolves issues when using MySQL 8.0 Returns callbacks immediately, removing up to 50ms overhead Lua sync wrappers utilise promises to remove additional overhead Optional import file to provide compatibility with MySQL-async style usage Download Documentation Framework \u00b6 The inventory has been designed to work for a modified version of ESX Legacy and will not work with anything else. For convenience, we provide a fork with all the necessary changes as well as several new features and performance changes. There should be no changes which break compatibility with other resources with the exception of what is necessary to support the inventory and new item system. Loadouts do not exist, so errors will occur in third-party resources attempting to manipulate them Inventories are slot-based and items can exist in multiple slots, which can throw off item counting Resources attempting to iterate through inventories in order will not work if a slot is empty Modifying your framework We do not provide a guide for manually converting your ESX to support Ox Inventory; instead you will need to manually reference changes in the github diff . Standard Installation \u00b6 Once you have downloaded and configured the required resources, you will need to update your server config. ensure oxmysql ensure es_extended ensure ox_inventory Fresh ESX install Run the query inside setup/install.sql That is all? Converting ESX inventories Run the query inside setup/install.sql Open fxmanifest.lua and uncomment server_script 'setup/convert.lua' Start the server and type convertinventory into the server console Comment out the conversion file Upgrading from Linden Inventory Run the query inside setup/upgrade.sql Open fxmanifest.lua and uncomment server_script 'setup/convert.lua' Start the server and type convertinventory linden into the server console Comment out or remove the conversion file This will not update your items file and old items may be incompatible; refer to documentation for item creation Keep the following in mind while developing your server ESX loadouts do not exist - resources that use them need to remove references or be modified to look for the item Built-in stashes should replace inventories used by resources such as esx_policejob, esx_taxijob, etc. Built-in shops should replace esx_shops and the esx_policejob armory, etc. You shouldn't be using esx_trunkinventory, esx_inventoryhud, or any other resources that provide conflicting functionality Attention You should restart your server after the first startup to ensure everything has been correctly setup Recommendations \u00b6 Ox Inventory provides a complete suite of tools to replace the built-in items and inventory system from ESX, and is not intended to be used with resources designed around it. ESX loadouts do not exist - resources that use them need to remove references or be modified to look for the weapon as an item Stashes from resources such as esx_policejob, esx_ambulancejob, etc. should be entirely replaced Shops from esx_shops or the armoury from esx_policejob should be removed Resources like esx_inventoryhud, esx_trunkinventory, esx_addoninventory, etc. should be removed xPlayer functions vs Inventory functions \u00b6 All item related functions from xPlayer, such as xPlayer.getInventoryItem , have been modified for compatibility purposes; however they are considered deprecated and should not be used. The reasoning is fairly simple - there's now additional function references and overhead to consider. Fortunately, the new Inventory functions can be used directly and offer a great deal of improvements over the old ones. You should read through the modules section for further information, but the following should give you a decent idea. xPlayer.getInventoryItem and xPlayer.removeInventoryItem Deprecated if xPlayer . getInventoryItem ( 'acetone' ). count > 2 and xPlayer . getInventoryItem ( 'antifreeze' ). count > 4 and xPlayer . getInventoryItem ( 'sudo' ). count > 9 then xPlayer . removeInventoryItem ( \"acetone\" , 3 ) xPlayer . removeInventoryItem ( \"antifreeze\" , 5 ) xPlayer . removeInventoryItem ( \"sudo\" , 10 ) end New function local Inventory = exports . ox_inventory : Inventory () ... ... local items = Inventory . Search ( source , 2 , { 'acetone' , 'antifreeze' , 'sudo' }) if items and inventory . acetone > 2 and inventory . antifreeze > 4 and inventory . sudo > 9 then Inventory . RemoveItem ( source , 'acetone' , 3 ) Inventory . RemoveItem ( source , 'antifreeze' , 5 ) Inventory . RemoveItem ( source , 'sudo' , 10 ) end","title":"Getting Started"},{"location":"#requirements","text":"","title":"Requirements"},{"location":"#oxmysql","text":"Our spin on a database wrapper utilising node-mysql2 , providing improved performance and enhanced features. Improved performance and compatibility Resolves issues when using MySQL 8.0 Returns callbacks immediately, removing up to 50ms overhead Lua sync wrappers utilise promises to remove additional overhead Optional import file to provide compatibility with MySQL-async style usage Download Documentation","title":"OxMySQL"},{"location":"#framework","text":"The inventory has been designed to work for a modified version of ESX Legacy and will not work with anything else. For convenience, we provide a fork with all the necessary changes as well as several new features and performance changes. There should be no changes which break compatibility with other resources with the exception of what is necessary to support the inventory and new item system. Loadouts do not exist, so errors will occur in third-party resources attempting to manipulate them Inventories are slot-based and items can exist in multiple slots, which can throw off item counting Resources attempting to iterate through inventories in order will not work if a slot is empty Modifying your framework We do not provide a guide for manually converting your ESX to support Ox Inventory; instead you will need to manually reference changes in the github diff . Standard","title":"Framework"},{"location":"#installation","text":"Once you have downloaded and configured the required resources, you will need to update your server config. ensure oxmysql ensure es_extended ensure ox_inventory Fresh ESX install Run the query inside setup/install.sql That is all? Converting ESX inventories Run the query inside setup/install.sql Open fxmanifest.lua and uncomment server_script 'setup/convert.lua' Start the server and type convertinventory into the server console Comment out the conversion file Upgrading from Linden Inventory Run the query inside setup/upgrade.sql Open fxmanifest.lua and uncomment server_script 'setup/convert.lua' Start the server and type convertinventory linden into the server console Comment out or remove the conversion file This will not update your items file and old items may be incompatible; refer to documentation for item creation Keep the following in mind while developing your server ESX loadouts do not exist - resources that use them need to remove references or be modified to look for the item Built-in stashes should replace inventories used by resources such as esx_policejob, esx_taxijob, etc. Built-in shops should replace esx_shops and the esx_policejob armory, etc. You shouldn't be using esx_trunkinventory, esx_inventoryhud, or any other resources that provide conflicting functionality Attention You should restart your server after the first startup to ensure everything has been correctly setup","title":"Installation"},{"location":"#recommendations","text":"Ox Inventory provides a complete suite of tools to replace the built-in items and inventory system from ESX, and is not intended to be used with resources designed around it. ESX loadouts do not exist - resources that use them need to remove references or be modified to look for the weapon as an item Stashes from resources such as esx_policejob, esx_ambulancejob, etc. should be entirely replaced Shops from esx_shops or the armoury from esx_policejob should be removed Resources like esx_inventoryhud, esx_trunkinventory, esx_addoninventory, etc. should be removed","title":"Recommendations"},{"location":"#xplayer-functions-vs-inventory-functions","text":"All item related functions from xPlayer, such as xPlayer.getInventoryItem , have been modified for compatibility purposes; however they are considered deprecated and should not be used. The reasoning is fairly simple - there's now additional function references and overhead to consider. Fortunately, the new Inventory functions can be used directly and offer a great deal of improvements over the old ones. You should read through the modules section for further information, but the following should give you a decent idea. xPlayer.getInventoryItem and xPlayer.removeInventoryItem Deprecated if xPlayer . getInventoryItem ( 'acetone' ). count > 2 and xPlayer . getInventoryItem ( 'antifreeze' ). count > 4 and xPlayer . getInventoryItem ( 'sudo' ). count > 9 then xPlayer . removeInventoryItem ( \"acetone\" , 3 ) xPlayer . removeInventoryItem ( \"antifreeze\" , 5 ) xPlayer . removeInventoryItem ( \"sudo\" , 10 ) end New function local Inventory = exports . ox_inventory : Inventory () ... ... local items = Inventory . Search ( source , 2 , { 'acetone' , 'antifreeze' , 'sudo' }) if items and inventory . acetone > 2 and inventory . antifreeze > 4 and inventory . sudo > 9 then Inventory . RemoveItem ( source , 'acetone' , 3 ) Inventory . RemoveItem ( source , 'antifreeze' , 5 ) Inventory . RemoveItem ( source , 'sudo' , 10 ) end","title":"xPlayer functions vs Inventory functions"},{"location":"issues/","text":"Unable to access the inventory \u00b6 If the inventory is not displaying after starting the resource, either an error has occurred (view the console) or you have downloaded the source code. You most likely downloaded the source code and didn't download the release zip of the inventory or you didn't build the UI. Solution Download the latest release and not the file marked -src , or build the UI manually with yarn . If the cause was an error, view the source of the error; if you are unable to determine the cause, post an issue with all relevent information (error message, the code throwing an error). Unable to access inventory after death \u00b6 You are not triggering the correct event after respawning, so the variable to store if you are dead is set as true. This is usually due to using outdated resources for ESX 1.1. Solution You can either update your resource, or trigger the following event where appropriate. TriggerEvent ( 'esx:onPlayerSpawn' )","title":"Common issues"},{"location":"issues/#unable-to-access-the-inventory","text":"If the inventory is not displaying after starting the resource, either an error has occurred (view the console) or you have downloaded the source code. You most likely downloaded the source code and didn't download the release zip of the inventory or you didn't build the UI. Solution Download the latest release and not the file marked -src , or build the UI manually with yarn . If the cause was an error, view the source of the error; if you are unable to determine the cause, post an issue with all relevent information (error message, the code throwing an error).","title":"Unable to access the inventory"},{"location":"issues/#unable-to-access-inventory-after-death","text":"You are not triggering the correct event after respawning, so the variable to store if you are dead is set as true. This is usually due to using outdated resources for ESX 1.1. Solution You can either update your resource, or trigger the following event where appropriate. TriggerEvent ( 'esx:onPlayerSpawn' )","title":"Unable to access inventory after death"},{"location":"misc/","text":"This category provides information on exports, commands, and events that are not covered under modules.","title":"Index"},{"location":"misc/client/disarm/","text":"Forces the player to holster their current weapon. This should be used instead of usual natives. Info Disarm () TriggerEvent ( 'ox_inventory:disarm' ) This event is networked and can be triggered from the server.","title":"Disarm"},{"location":"misc/client/notify/","text":"Triggers the builtin notification system, utilising react-hot-toast . Info Notify ( data ) exports . ox_inventory : Notify ( data ) TriggerEvent ( 'ox_inventory:notify' , data ) This event is networked and can be triggered from the server. Options Explanation type undefined, success, error text Message to display duration Display time of notification position Where to display the notification style Custom CSS styling to apply Example Notify ({ type = 'error' , text = 'Lost access to the target inventory' , duration = 2500 })","title":"Notify"},{"location":"modules/","text":"Ox Inventory is organised into separate files which are loaded and stored in a single environment as modules. Most functions are included as part of a module and can only be accessed by storing a local reference to the module. This section will provide details on several functions that are utilised in several modules or available to use in other resources as exports. Note Modules are not typically usable outside of the resource; if you want to use them you need to look at the exports listed. Attention If the documentation for a function does not include an export then it is only intended for internal use.","title":"Overview"},{"location":"modules/inventory/customdrop/","text":"Allows server-side creation of a drop with pre-defined items and a custom prefix. Info TriggerEvent ( 'ox_inventory:customDrop' , prefix , items , coords , slots , maxWeight ) Argument Type Default Optional Explanation prefix string - no Label text before the drop id items table - no An array of items to add (more below) coords vector3 - no Where should the drop be created slots integer Config.PlayerSlots yes How many slots are in the drop maxWeight integer Config.DefaultWeight yes How much weight can be stored Defining items TriggerEvent ( 'ox_inventory:customDrop' , 'Carcass' , { { 'meat' , 5 , { grade = 2 , type = 'deer' }}, { 'hide' , 5 , { grade = 2 , type = 'deer' }} }, entityCoords ) Creates a \"Carcass\" drop on some supplied coordinates, containing meat and hide from a deer. Option Type Optional Explanation 1 string no Name of the item to add 2 integer no Number of items to add 3 table yes Metadata table to apply to the item","title":"Creating custom drops"},{"location":"modules/inventory/customstash/","text":"The client can request inventory data from any inventory type and id and the server will attempt to create one if there is a data template. Stashes will not always have a defined template, so it is necessary to create them on the server before a client can request it. Info exports . ox_inventory : CreateStash ( id , label , slots , maxWeight , owner , items ) exports . ox_inventory : CreateStash ( 'someid' , 'Inventory label' , 10 , 10000 , true , { cola = 1 , bread = 3 }) Argument Type Optional Explanation id str/int no A unique identifier used to access and store the stash label string no The text to display when the stash is opened slots integer no The number of slots for storing items maxWeight integer no The maximum amount of weight that can be held owner string yes The identifier of the stash owner, or true for personal stashes items table yes Items to be loaded in the stash Items should only be defined for newly created stashes and for converting key-value pairs into compatible items. {cola = 1, bread = 3} will be converted to {{slot = 1, name = cola, count = 1}, {slot = name = bread, count = 3}} The reasoning for this function is to provide easier integration with other resources and prevention of arbitrarily created stashes defined by the client.","title":"Creating custom stashes"},{"location":"modules/inventory/client/search/","text":"Returns a table containing data for the searched items, the result varying based on the provided searchtype. Info Inventory . Search ( searchtype , items , metadata ) exports . ox_inventory : Search ( searchtype , items , metadata ) Argument Type Optional Explanation searchtype integer no 1: Returns slots and data, 2: Returns total count of item items table no Array of item names to search for metadata table yes Metadata pairs that must exist on the found item Items and metadata will accept a string, though it limits you to searching for metadata.type Example Single item data local water = Inventory . Search ( 1 , 'water' ) local count = 0 for _ , v in pairs ( water ) do print ( v . slot .. ' contains ' .. v . count .. ' water ' .. json . encode ( v . metadata )) count = count + v . count end print ( 'You have ' .. count .. ' water' ) Multiple items data local inventory = Inventory . Search ( 1 , { 'meat' , 'skin' }, 'deer' ) if inventory then for name , data in pairs ( inventory ) do local count = 0 for _ , v in pairs ( data ) do if v . slot then print ( v . slot .. ' contains ' .. v . count .. ' ' .. name .. ' ' .. json . encode ( v . metadata )) count = count + v . count end end print ( 'You have ' .. count .. ' ' .. name ) end end Single item count local count = Inventory . Search ( 2 , 'water' ) print ( 'You have ' .. count .. ' water' ) Multiple items count local inventory = Inventory . Search ( 2 , { 'meat' , 'skin' }, { grade = 1 }) if inventory then for name , count in pairs ( inventory ) do print ( 'You have ' .. count .. ' ' .. name ) end end","title":"Inventory.Search"},{"location":"modules/inventory/server/","text":"The inventory module handles most inventory-related functions and stores all current inventory data. Many of the functions provided in this module are similar to the xPlayer functions, however they can be used for non-player inventories too. The inventory module is exported - add local Inventory = exports.ox_inventory:Inventory() near the top of your script to utilise its functions. Info Inventory ( id ) exports . ox_inventory : Inventory ( id ) The argument is optional - by providing it you will receive a specific inventory object, otherwise you gain access to all module functions. Example local Inventory = exports . ox_inventory : Inventory () Inventory . AddItem ( 1 , 'water' , 1 ) print ( json . encode ( exports . ox_inventory : Inventory ( 1 ). items )) The first export grants access to all the functions (you don't have to define it locally). After adding an item to the inventory, the second export will retrieve inventory id 1 and print out all items. Danger The following functions are intended for internal use only . They are documented here for convenience. Using or modifying these functions may break intended functionality. Module functions \u00b6 Info Inventory . SyncInventory ( xPlayer , inv ) Updates the xPlayer with correct inventory, weight, maxWeight, and accounts values. Info Inventory . SetSlot ( inventory , item , count , metadata , slot ) Sets the current item, count, and metadata of a slot. Info Inventory . SlotWeight ( item , slot ) Updates the weight values of a slot depending on item count, ammo, and metadata. Info Inventory . Remove ( id , type ) Deletes the inventory for the provided id. Ensures drops are removed from clients. Info Inventory . Save ( inv ) Saves an inventory to the database immediately. Info Inventory . Load ( id , inventory , owner ) Loads an inventory from the database.","title":"Server module"},{"location":"modules/inventory/server/#module-functions","text":"Info Inventory . SyncInventory ( xPlayer , inv ) Updates the xPlayer with correct inventory, weight, maxWeight, and accounts values. Info Inventory . SetSlot ( inventory , item , count , metadata , slot ) Sets the current item, count, and metadata of a slot. Info Inventory . SlotWeight ( item , slot ) Updates the weight values of a slot depending on item count, ammo, and metadata. Info Inventory . Remove ( id , type ) Deletes the inventory for the provided id. Ensures drops are removed from clients. Info Inventory . Save ( inv ) Saves an inventory to the database immediately. Info Inventory . Load ( id , inventory , owner ) Loads an inventory from the database.","title":"Module functions"},{"location":"modules/inventory/server/additem/","text":"Adds an item to the specified inventory. Info Inventory . AddItem ( inventory , item , count , metadata , slot ) Argument Type Optional Explanation inventory str/int no The id of the inventory to add an item to, such as playerid item string no Name of the item to add count integer no Number of items to add metadata table yes Metadata to assign to the given item This function should be used in combination with Inventory.CanCarryItem to ensure space is available.","title":"Inventory.AddItem"},{"location":"modules/inventory/server/cancarryitem/","text":"Checks if the provided inventory is capable of holding new items. Info Inventory . CanCarryItem ( inventory , item , count , metadata ) This function enhances the default functionality of xPlayer.canCarryItem . Argument Type Optional Explanation inv id no Which inventory to check item string no Name of the item count number no Number of items metadata table yes Metadata values to compare Example local item = Inventory . GetItem ( 2 , 'bread' ) if item and item . count > 5 then if Inventory . CanCarryItem ( 1 , 'bread' 5 ) then Inventory . RemoveItem ( 2 , 'bread' ) Inventory . AddItem ( 1 , 'bread' ) else print ( Inventory ( 1 ). label .. ' is unable to carry 5 bread' ) end else print ( Inventory ( 2 ). label .. ' does not have 5 bread' ) end","title":"Inventory.CanCarryItem"},{"location":"modules/inventory/server/canswapitem/","text":"Checks if the provided inventory is capable of swapping out different items. Info Inventory . CanSwapItem ( inventory , firstItem , firstItemCount , testItem , testItemCount ) This function enhances the default functionality of xPlayer.canSwapItem .","title":"Inventory.CanSwapItem"},{"location":"modules/inventory/server/create/","text":"Creates a new inventory from the given arguments. Info Inventory . Create ( id , label , type , slots , weight , maxWeight , owner , items ) Argument Type Optional Explanation id integer no A unique identifier for the inventory to create label string yes A generic name for the inventory to display type string no The inventory's type (player, stash, etc) slots integer no Total number of unique slots weight integer no Weight of contents (usually 0) maxWeight integer no Total weight inventory can hold owner string yes Identifier for the inventory's owner items table yes Items to load into the inventory If no value is submitted for items then it will attempt to load them from the database instead. Class methods \u00b6 These functions are self-referencing, and allow setting or getting data from other resources, or triggering effects when updating a value. Info Inventory : set ( key , value ) Updates the key to reflect the new value. When closing an inventory it updates the time an inventory was last accessed, and deletes empty drops. Info Inventory : get ( key ) Gets the current value of a key. Generally not needed (you can reference Inventory.key instead). Info Inventory : minimal () Returns a \"minimal\" inventory, with most data removed. Generally used when saving to the database.","title":"Inventory.Create"},{"location":"modules/inventory/server/create/#class-methods","text":"These functions are self-referencing, and allow setting or getting data from other resources, or triggering effects when updating a value. Info Inventory : set ( key , value ) Updates the key to reflect the new value. When closing an inventory it updates the time an inventory was last accessed, and deletes empty drops. Info Inventory : get ( key ) Gets the current value of a key. Generally not needed (you can reference Inventory.key instead). Info Inventory : minimal () Returns a \"minimal\" inventory, with most data removed. Generally used when saving to the database.","title":"Class methods"},{"location":"modules/inventory/server/getitem/","text":"Searches an inventory for an item, returning generic item data and the count. Info Inventory . GetItem ( inventory , item , metadata ) This function enhances the default functionality of xPlayer.getInventoryItem .","title":"Inventory.GetItem"},{"location":"modules/inventory/server/removeitem/","text":"Removes an item from the provided inventory. Info Inventory . RemoveItem ( inventory , item , count , metadata , slot ) This function enhances the default functionality of xPlayer.removeInventoryItem .","title":"Inventory.RemoveItem"},{"location":"modules/inventory/server/search/","text":"Returns a table containing data for the searched items, the result varying based on the provided searchtype. Info local Inventory = exports . ox_inventory : Inventory () Inventory . Search ( inventory , searchtype , items , metadata ) Argument Type Optional Explanation inventory str/int no The id of the inventory to search, such as playerid or a plate searchtype integer no 1: Returns slots and data, 2: Returns total count of item items table no Array of item names to search for metadata table yes Metadata pairs that must exist on the found item Items and metadata will accept a string, though it limits you to searching for metadata.type Example Single item data local water = Inventory . Search ( 3 , 1 , 'water' ) local count = 0 for _ , v in pairs ( water ) do print ( v . slot .. ' contains ' .. v . count .. ' water ' .. json . encode ( v . metadata )) count = count + v . count end print ( 'Player 3 has ' .. count .. ' water' ) Multiple items data local inventory = Inventory . Search ( 377346 , 1 , { 'meat' , 'skin' }, 'deer' ) if inventory then for name , data in pairs ( inventory ) do local count = 0 for _ , v in pairs ( data ) do if v . slot then print ( v . slot .. ' contains ' .. v . count .. ' ' .. name .. ' ' .. json . encode ( v . metadata )) count = count + v . count end end print ( 'Drop 377346 contains deer ' .. count .. ' ' .. name ) end end Single item count local count = Inventory . Search ( 'trunk-GEZ 461' , 'water' ) print ( 'Vehicle contains ' .. count .. ' water' ) Multiple items count local inventory = Inventory . Search ( 1 , 2 , { 'meat' , 'skin' }, { grade = 1 }) if inventory then for name , count in pairs ( inventory ) do print ( 'Player 1 has ' .. count .. ' ' .. name ) end end","title":"Inventory.Search"},{"location":"modules/inventory/server/setitem/","text":"Sets the total count of an item in the given inventory, either adding or removing as necessary. Info Inventory . SetItem ( inventory , item , count , metadata ) This function enhances the default functionality of xPlayer.setInventoryItem .","title":"Inventory.SetItem"},{"location":"modules/inventory/server/setmetadata/","text":"Replaces the metadata table on an item with new values. Info local Inventory = exports . ox_inventory : Inventory () Inventory . SetMetadata ( source , slot , metadata ) Argument Type Optional Explanation source integer no The id of the inventory being accessed slot integer no The slot being modified metadata table no New metadata values This will replace all metadata values, so if you want to change a value you need to get the item data first. Example Add item metadata local water = Inventory . Search ( xPlayer . source , 1 , 'water' ) for k , v in pairs ( water ) do print ( ' \\n ______________' .. ' \\n - index ' .. k ) print ( v . name , 'slot: ' .. v . slot , 'metadata: ' .. json . encode ( v . metadata )) water = v end water . metadata . type = 'clean' Inventory . SetMetadata ( xPlayer . source , water . slot , water . metadata ) print ( 'Player 3 has ' .. count .. ' water' )","title":"Inventory.SetMetadata"},{"location":"modules/items/create/","text":"All static item data is loaded from files in the data folder rather than the database. The item table defines a basic template to reference when working with an instance of that item type, and can contain custom data. Example Standard Burger A normal burger item, as it appears in data/items.lua [ 'burger' ] = { label = 'Burger' , weight = 220 , stack = true , close = true , client = { status = { hunger = 200000 }, anim = { dict = 'mp_player_inteat@burger' , clip = 'mp_player_int_eat_burger_fp' }, prop = { model = 'prop_cs_burger_01' , pos = { x = 0.02 , y = 0.02 , y = - 0.02 }, rot = { x = 0.0 , y = 0.0 , y = 0.0 } }, usetime = 2500 , } } Custom Burger A modified burger item, with a description and custom crafting table. [ 'burger' ] = { label = 'Burger' , description = 'Just what is the secret formula?' weight = 220 , stack = true , close = true , client = { status = { hunger = 200000 }, anim = { dict = 'mp_player_inteat@burger' , clip = 'mp_player_int_eat_burger_fp' }, prop = { model = 'prop_cs_burger_01' , pos = { x = 0.02 , y = 0.02 , y = - 0.02 }, rot = { x = 0.0 , y = 0.0 , y = 0.0 } }, usetime = 2500 , } crafting = { [ 'bun' ] = 2 , [ 'ketchup' ] = 1 , [ 'mustard' ] = 1 , [ 'cheese' ] = 1 , [ 'pickles' ] = 1 , [ 'lettuce' ] = 1 , [ 'tomato' ] = 1 , [ 'onion' ] = 1 , } } Combined with several new functions and events you could easily create your own crafting system. Standard options Shared Argument Optional Default Explanation label no - The display text for an item weight yes 0 The weight of an item in grams stack yes true Does the item stack with others of the same type close yes true Does the item close the inventory if used description yes - Text to display in the item tooltip consume yes 1 Number of an item needed to use it, and removed after use client yes - Options accessible only to the client server yes - Options accessible only to the server Client Argument Explanation event Trigger a client event after use status Adjust esx_status values after use anim Animation during progress bar prop Attached entity during progress bar disable Disable actions during progress bar usetime Time for progress bar to complete cancel Able to cancel progress bar","title":"Defining item data"},{"location":"modules/items/client/usable/","text":"The recommended method for registering items as usable is adding a function to modules/items/client.lua . It is still possible to use items through ESX.RegisterUsableItem, though it is less flexible. Info Item ( name , callback ) Argument Data Type Optional Explanation name string no The name of the item to apply the function to callback function no Creates a function to be triggered when an item is used Example Sample Item ( name , function ( data , slot ) -- Trigger on use TriggerEvent ( 'ox_inventory:item' , data , function ( data ) -- Trigger after use end ) end ) Example Item ( 'bandage' , function ( data , slot ) local maxHealth = 200 local health = GetEntityHealth ( ESX . PlayerData . ped ) if health < maxHealth then TriggerEvent ( 'ox_inventory:item' , data , function ( data ) if data then SetEntityHealth ( ESX . PlayerData . ped , math.min ( maxHealth , math.floor ( health + maxHealth / 16 ))) TriggerEvent ( 'ox_inventory:Notify' , { text = 'You feel better already' }) end end ) end end )","title":"Register usable items"},{"location":"modules/items/server/","text":"The server-side items module loads general item data, provides functions for manipulating items, and completes the startup process. Retrieve item data \u00b6 Info Items ( name ) exports . ox_inventory : Items ( name ) The argument is optional and, if ignored, will return the full items list. Example local item , itemtype = Items ( name ) if item then print ( item . name , item . weight , itemtype ) end Item Type Explanation nil Item 1 Weapon 2 Ammo 3 Component","title":"Server module"},{"location":"modules/items/server/#retrieve-item-data","text":"Info Items ( name ) exports . ox_inventory : Items ( name ) The argument is optional and, if ignored, will return the full items list. Example local item , itemtype = Items ( name ) if item then print ( item . name , item . weight , itemtype ) end Item Type Explanation nil Item 1 Weapon 2 Ammo 3 Component","title":"Retrieve item data"},{"location":"modules/items/server/newmetadata/","text":"This function is used internally when adding or buying items to define metadata. You can add additional items here to give them new default values. Info Items . Metadata ( xPlayer , item , metadata , count ) | Argument | Type | Explanation | | ---------- | ----------- | | xPlayer | class | Player triggering the function | | item | table | The item being manipulated | | metadata | Extra metadata to be added to the item | | count | Number of items to be added |","title":"Defining default metadata"},{"location":"modules/keyboard/input/","text":"Window component that retuns values of input fields Info Keyboard . Input ( header , rows ) exports . ox_inventory : Keyboard ( header , rows ) Argument Type Optional Explanation header string no Header title of the window rows table no Table of strings, each adding a new row Info The function is sync , returned value is a table if at least one input field had a value in it upon submitting, otherwise returned value is nil Example local data = Keyboard . Input ( 'Evidence Locker' , { 'Locker number' }) if data then local lockerNum = data [ 1 ] else print ( 'No value was entered into the field!' ) end","title":"Keyboard.Input"},{"location":"modules/progress/","text":"Cancels the current progress bar, if it can be cancelled. This function is bound to the X key with RegisterKeyMapping. Info Progress . Cancel () exports . ox_inventory : ProgressCancel ()","title":"Progress.Cancel"},{"location":"modules/progress/active/","text":"Returns the current state of the progress bar (active, inactive). Info Progress . Active exports . ox_inventory : ProgressActive ()","title":"Progress.Active"},{"location":"modules/progress/start/","text":"Starts the progress bar and prevents some actions such as opening the inventory, reloading, etc. Info Progress . Start ( options , completed ) exports . ox_inventory : Progress ( options , completed ) Argument Type Optional Explanation options table no Change the progress bar behaviour completed function no Callback function after completing the progress timer Options Argument Type Optional Explanation duration integer no Time it takes for the bar to callback in milliseconds label string no Text to display on progress bar useWhileDead boolean yes Able to perform an action while dead canCancel boolean yes Can cancel the progress bar anim table yes Perform an animation or scenario prop table yes Attach a prop to the player propTwo table yes Attach a prop to the player disable table yes Disable control actions while active Example Progress . Start ({ duration = 2000 , label = 'Drinking water' , useWhileDead = false , canCancel = true , disable = { move = false , car = true , combat = true , mouse = false }, anim = { dict = 'mp_player_intdrink' , clip = 'loop_bottle' , flags = 49 , }, prop = { model = 'prop_ld_flow_bottle' , pos = { x = 0.03 , y = 0.03 , y = 0.02 }, rot = { x = 0.0 , y = 0.0 , y = - 1.5 }, bone = 58866 }, }, function ( cancel ) if not cancel then print ( \"You drank some water - that'll quench ya!\" ) end end )","title":"Progress.Start"},{"location":"modules/utils/client/playanim/","text":"Requests and plays an animation on the player asynchronously. Info Utils . PlayAnim ( wait , ...) Argument Type Optional Explanation wait integer no Time to wait until clearing task and animdict args any no TaskPlayAnim Example Utils . PlayAnim ( 1000 , 'pickup_object' , 'putdown_low' , 5.0 , 1.5 , 1.0 , 48 , 0.0 , 0 , 0 , 0 )","title":"Utils.PlayAnim"},{"location":"modules/utils/client/playanimadvanced/","text":"Requests and plays an advanced animation on the player asynchronously. Info Utils . PlayAnimAdvanced ( wait , ...) Argument Type Optional Explanation wait integer no Time to wait until clearing task and animdict args any no TaskPlayAnimAdvanced Example Utils . PlayAnimAdvanced ( 800 , false , 'reaction@intimidation@1h' , 'intro' , GetEntityCoords ( ESX . PlayerData . ped , true ), 0 , 0 , GetEntityHeading ( ESX . PlayerData . ped ), 8.0 , 3.0 , - 1 , 50 , 1 , 0 , 0 )","title":"Utils.PlayAnimAdvanced"},{"location":"modules/utils/shared/checktable/","text":"Interate through a table and checks if it contains a value. Info Utils . CheckTable ( table , value ) Argument Data Type Optional table table no value any no","title":"Utils.CheckTable"},{"location":"modules/utils/shared/copytable/","text":"Creates a duplicate of another table without references. Info Utils . Copy ( table , deep ) Argument Data Type Optional Explanation table table no deep boolean yes If set to true the copy will be recursive","title":"Utils.Copy"},{"location":"modules/utils/shared/matchtables/","text":"Returns true if the two provided tables contain the exact same entries. Info Utils . MatchTables ( table1 , table2 ) exports . ox_inventory : MatchTables ( table1 , table2 )","title":"Utils.MatchTables"},{"location":"modules/utils/shared/servercallbacks/","text":"Server Callbacks \u00b6 We've implemented a system similar to ESX callbacks within the inventory. You can use both standard callbacks and Await callbacks. ox_inventory:getItemCount Standard Utils . TriggerServerCallback ( 'ox_inventory:getItemCount' , callback , item , metadata , target ) Utils . TriggerServerCallback ( 'ox_inventory:getItemCount' , function ( count ) print ( 'You currently have ' .. count .. ' water' ) end , 'water' ) Utils . TriggerServerCallback ( 'ox_inventory:getItemCount' , function ( count ) print ( 'Trunk contains ' .. count .. ' water' ) end , 'water' , false , trunkEGZ 202 ) local count = Utils . TriggerServerCallback ( 'ox_inventory:getItemCount' , 'water' , false , 'trunkEGZ 202' ) Await Utils . AwaitServerCallback ( 'ox_inventory:getItemCount' , item , metadata , target ) print ( 'You have ' .. Utils . AwaitServerCallback ( 'ox_inventory:getItemCount' , 'water' ) .. ' water' ) local count = Utils . AwaitServerCallback ( 'ox_inventory:getItemCount' , 'water' , false , 'trunkEGZ 202' ) print ( 'Trunk contains ' .. count .. ' water' ) ox_inventory:getInventory Utils . AwaitServerCallback ( 'ox_inventory:getInventory' , item , metadata , target ) local inventory = Utils . AwaitServerCallback ( 'ox_inventory:getInventory' , 'trunkEGZ 202' ) if inventory then print (( 'Inventory %s has the %s type, is able to hold up to %sg in %s different slots. \\n Current weight: %sg' ): format ( inventory . id , inventory . type , inventory . maxWeight , inventory . slots , inventory . weight )) end","title":"Servercallbacks"},{"location":"modules/utils/shared/servercallbacks/#server-callbacks","text":"We've implemented a system similar to ESX callbacks within the inventory. You can use both standard callbacks and Await callbacks. ox_inventory:getItemCount Standard Utils . TriggerServerCallback ( 'ox_inventory:getItemCount' , callback , item , metadata , target ) Utils . TriggerServerCallback ( 'ox_inventory:getItemCount' , function ( count ) print ( 'You currently have ' .. count .. ' water' ) end , 'water' ) Utils . TriggerServerCallback ( 'ox_inventory:getItemCount' , function ( count ) print ( 'Trunk contains ' .. count .. ' water' ) end , 'water' , false , trunkEGZ 202 ) local count = Utils . TriggerServerCallback ( 'ox_inventory:getItemCount' , 'water' , false , 'trunkEGZ 202' ) Await Utils . AwaitServerCallback ( 'ox_inventory:getItemCount' , item , metadata , target ) print ( 'You have ' .. Utils . AwaitServerCallback ( 'ox_inventory:getItemCount' , 'water' ) .. ' water' ) local count = Utils . AwaitServerCallback ( 'ox_inventory:getItemCount' , 'water' , false , 'trunkEGZ 202' ) print ( 'Trunk contains ' .. count .. ' water' ) ox_inventory:getInventory Utils . AwaitServerCallback ( 'ox_inventory:getInventory' , item , metadata , target ) local inventory = Utils . AwaitServerCallback ( 'ox_inventory:getInventory' , 'trunkEGZ 202' ) if inventory then print (( 'Inventory %s has the %s type, is able to hold up to %sg in %s different slots. \\n Current weight: %sg' ): format ( inventory . id , inventory . type , inventory . maxWeight , inventory . slots , inventory . weight )) end","title":"Server Callbacks"},{"location":"modules/utils/shared/tablecontains/","text":"Returns true if the first table contains all the elements from the second table. Info Utils . TableContains ( table1 , table2 ) exports . ox_inventory : TableContains ( table1 , table2 ) Example for k , v in pairs ( ESX . GetPlayerData (). Inventory ) do if v . name == 'meat' and Utils . TableContains ( v . metadata , { grade = 1 }) then count = count + v . count end end","title":"Utils.TableContains"}]}