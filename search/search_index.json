{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Danger This resource is being designed with ease of use and advanced functionality as a core principal, however that doesn't mean it is intended for config kings . If you do not possess a basic understanding of coding - nor the ability to read documentation - then turn back now and go use a drag-n-drop resource instead. Requirements \u00b6 OxMySQL \u00b6 A new lightweight database wrapper utilising node-mysql2 , unlike the abandoned ghmattimysql and mysql-async resources. Improved performance and compatibility Resolves issues when using MySQL 8.0 Returns callbacks immediately, removing up to 50ms overhead Lua sync wrappers utilise promises to remove additional overhead Attention Config is currently hardcoded! Modify your connection settings inside oxmysql.js Note When starting for the first time dependencies will be downloaded by yarn . You may need to restart your server upon completion. Download Documentation Framework \u00b6 The inventory has been designed to work for a modified version of ESX Legacy and will not work with anything else. For convenience, we provide a fork with all necessary changes. Standard: Minimal changes to maintain near-complete compatibility with other resources Ox: Experimental branch to add new features and modify existing features, regardless of breaking compatibility Modifying your framework If you insist on manually applying changes to your framework, you will need to manually reference changes in the github diff . No guide is provided. Standard Experimental Installation \u00b6 Once you have downloaded and configured the required resources, you will need to update your server config. ensure oxmysql ensure es_extended ensure ox_inventory Fresh ESX install Run the query inside setup/install.sql That is all? Converting ESX inventories Run the query inside setup/install.sql Open fxmanifest.lua and uncomment server_script 'setup/convert.lua' Start the server and type convertinventory into the server console Comment out the conversion file Upgrading from Linden Inventory Run the query inside setup/upgrade.sql Open fxmanifest.lua and uncomment server_script 'setup/convert.lua' Start the server and type convertinventory linden into the server console Comment out the conversion file Keep the following tips in mind while developing your server ESX loadouts do not exist - resources that use them need to remove references or be modified to look for the item Built-in stashes should replace inventories used by resources such as esx_policejob, esx_taxijob, etc. Built-in shops should replace esx_shops and the esx_policejob armory, etc. You shouldn't be using esx_trunkinventory, esx_inventoryhud, or any other resources that provide conflicting functionality You should restart your server after the first startup to ensure everything has been correctly setup. Common issues \u00b6 Unable to access inventory after death You are not triggering the correct event after respawning, so the variable to store if you are dead is set as true. This is usually due to using outdated resources for ESX 1.1. You can either update your resource, or trigger the following event where appropriate. TriggerEvent ( 'esx:onPlayerSpawn' )","title":"Getting Started"},{"location":"#requirements","text":"","title":"Requirements"},{"location":"#oxmysql","text":"A new lightweight database wrapper utilising node-mysql2 , unlike the abandoned ghmattimysql and mysql-async resources. Improved performance and compatibility Resolves issues when using MySQL 8.0 Returns callbacks immediately, removing up to 50ms overhead Lua sync wrappers utilise promises to remove additional overhead Attention Config is currently hardcoded! Modify your connection settings inside oxmysql.js Note When starting for the first time dependencies will be downloaded by yarn . You may need to restart your server upon completion. Download Documentation","title":"OxMySQL"},{"location":"#framework","text":"The inventory has been designed to work for a modified version of ESX Legacy and will not work with anything else. For convenience, we provide a fork with all necessary changes. Standard: Minimal changes to maintain near-complete compatibility with other resources Ox: Experimental branch to add new features and modify existing features, regardless of breaking compatibility Modifying your framework If you insist on manually applying changes to your framework, you will need to manually reference changes in the github diff . No guide is provided. Standard Experimental","title":"Framework"},{"location":"#installation","text":"Once you have downloaded and configured the required resources, you will need to update your server config. ensure oxmysql ensure es_extended ensure ox_inventory Fresh ESX install Run the query inside setup/install.sql That is all? Converting ESX inventories Run the query inside setup/install.sql Open fxmanifest.lua and uncomment server_script 'setup/convert.lua' Start the server and type convertinventory into the server console Comment out the conversion file Upgrading from Linden Inventory Run the query inside setup/upgrade.sql Open fxmanifest.lua and uncomment server_script 'setup/convert.lua' Start the server and type convertinventory linden into the server console Comment out the conversion file Keep the following tips in mind while developing your server ESX loadouts do not exist - resources that use them need to remove references or be modified to look for the item Built-in stashes should replace inventories used by resources such as esx_policejob, esx_taxijob, etc. Built-in shops should replace esx_shops and the esx_policejob armory, etc. You shouldn't be using esx_trunkinventory, esx_inventoryhud, or any other resources that provide conflicting functionality You should restart your server after the first startup to ensure everything has been correctly setup.","title":"Installation"},{"location":"#common-issues","text":"Unable to access inventory after death You are not triggering the correct event after respawning, so the variable to store if you are dead is set as true. This is usually due to using outdated resources for ESX 1.1. You can either update your resource, or trigger the following event where appropriate. TriggerEvent ( 'esx:onPlayerSpawn' )","title":"Common issues"},{"location":"items/","text":"All static item data is loaded from files in the data folder rather than the database. The item table defines a basic template to reference when working with an instance of that item name, and can contain custom data. Standard options Shared Argument Optional Default Explanation label no - The display text for an item weight yes 0 The weight of an item in grams stack yes true Does the item stack with others of the same type close yes true Does the item close the inventory if used description yes - Text to display in the item tooltip consume yes 1 Number of an item needed to use it, and removed after use client yes - Options accessible only to the client server yes - Options accessible only to the server Client Argument Explanation event Trigger a client event after use status Adjust esx_status values after use anim Animation during progress bar prop Attached entity during progress bar disable Disable actions during progress bar usetime Time for progress bar to complete cancel Able to cancel progress bar Example Standard Burger A normal burger item, as it appears in data/items.lua [ 'burger' ] = { label = 'Burger' , weight = 220 , stack = true , close = true , client = { status = { hunger = 200000 }, anim = { dict = 'mp_player_inteat@burger' , clip = 'mp_player_int_eat_burger_fp' }, prop = { model = 'prop_cs_burger_01' , pos = { x = 0.02 , y = 0.02 , y = - 0.02 }, rot = { x = 0.0 , y = 0.0 , y = 0.0 } }, usetime = 2500 , } } Custom Burger A modified burger item, with a description and custom crafting table. [ 'burger' ] = { label = 'Burger' , description = 'Just what is the secret formula?' weight = 220 , stack = true , close = true , client = { status = { hunger = 200000 }, anim = { dict = 'mp_player_inteat@burger' , clip = 'mp_player_int_eat_burger_fp' }, prop = { model = 'prop_cs_burger_01' , pos = { x = 0.02 , y = 0.02 , y = - 0.02 }, rot = { x = 0.0 , y = 0.0 , y = 0.0 } }, usetime = 2500 , } crafting = { [ 'bun' ] = 2 , [ 'ketchup' ] = 1 , [ 'mustard' ] = 1 , [ 'cheese' ] = 1 , [ 'pickles' ] = 1 , [ 'lettuce' ] = 1 , [ 'tomato' ] = 1 , [ 'onion' ] = 1 , } } Combined with several new functions and events you could easily create a crafting system.","title":"Overview"},{"location":"items/client/","text":"The recommended method for registering items as usable is modifying modules/items/client.lua with a function. It is still possible to use items through ESX.RegisterUsableItem, though it is less flexible. Info Item ( name , callback ) Arguments Argument Data Type Optional Explanation name string no The name of the item to apply the function to callback function no Creates a function to be triggered when an item is used Example -- Receives general data about bandages, and the slot being used Item ( 'bandage' , function ( data , slot ) local maxHealth = 200 local health = GetEntityHealth ( ESX . PlayerData . ped ) -- Checks if the item meets usage requirements if health < maxHealth then -- Triggers an event to check if the item can be used and exists on the server TriggerEvent ( 'ox_inventory:item' , data , function ( data ) -- When the callback function is triggered, receive server data and trigger the use effects if data then SetEntityHealth ( ESX . PlayerData . ped , math.min ( maxHealth , math.floor ( health + maxHealth / 16 ))) TriggerEvent ( 'ox_inventory:Notify' , { text = 'You feel better already' }) end end ) end end )","title":"Creating usable items"},{"location":"items/server/","text":"The server module provides both data and functions for use within the resource and externally. Triggers an event after resource initialisation to receive the item list in another resource Registers items using ESX item callbacks as usable Automatically dumps the items database into the items data file Applies default metadata values for specified items Allows lookup of item data Items ( name ) exports . ox_inventory : Items ( name ) Returns general data for the given item name, or all data if no argument is provided. Argument Data Type Optional Explanation name string yes Name of the item to receive data for Example local item , itemtype = Items ( name ) if item then print ( item . name , item . weight , itemtype ) end Item Type Explanation nil Item 1 Weapon 2 Ammo 3 Component","title":"Server item handling"},{"location":"modules/","text":"Ox Inventory is organised into separate files which are loaded and stored in a single environment as modules. Most functions are included as part of a module and can only be accessed by storing a local reference to the module. This section will provide details on several functions that are utilised in several modules or available to use in other resources as exports. Attention If the documentation for a function does not include an export then it is only intended for internal use.","title":"Overview"},{"location":"modules/progress/","text":"Info exports . ox_inventory : CancelProgress () Cancels the current progress bar, if it can be cancelled. This function is bound to the X key with RegisterKeyMapping. Info exports . ox_inventory : ProgressActive () Returns the current state of the progress bar (active, inactive). Info Progress . Start ( options , completed ) exports . ox_inventory : Progress ( options , completed ) Starts the progress bar and prevents some actions such as opening the inventory, reloading, etc. Arguments Argument Type Optional Explanation options table no Change the progress bar behaviour completed function no Callback function after completing the progress timer Options Argument Type Optional Explanation duration integer no Time it takes for the bar to callback in milliseconds label string no Text to display on progress bar useWhileDead boolean yes Able to perform an action while dead canCancel boolean yes Can cancel the progress bar anim table yes Perform an animation or scenario prop table yes Attach a prop to the player propTwo table yes Attach a prop to the player disable table yes Disable control actions while active Example Progress . Start ({ duration = 2000 , label = 'Drinking water' , useWhileDead = false , canCancel = true , disable = { move = false , car = true , combat = true , mouse = false }, anim = { dict = 'mp_player_intdrink' , clip = 'loop_bottle' , flags = 49 , }, prop = { model = 'prop_ld_flow_bottle' , pos = { x = 0.03 , y = 0.03 , y = 0.02 }, rot = { x = 0.0 , y = 0.0 , y = - 1.5 }, bone = 58866 }, }, function ( cancel ) if not cancel then print ( \"You drank some water - that'll quench ya!\" ) end end )","title":"Progress"},{"location":"modules/utils/client/inventorysearch/","text":"Returns a table containing data for the searched items, the result varying based on the provided searchtype. Info Utils . InventorySearch ( searchtype , items , metadata ) exports . ox_inventory : InventorySearch ( searchtype , items , metadata ) Arguments Argument Type Optional Explanation searchtype integer no 1: Returns slots and data 2: Returns total count of item items string/table no The name of an item - or array of item names - to search for metadata string/table yes Required metadata values that must exist on an item to return data Example Single item data local lockpick = Utils . InventorySearch ( 1 , 'lockpick' ) local count = 0 for _ , v in pairs ( lockpick ) do print ( v . slot .. ' contains ' .. v . count .. ' lockpicks ' .. json . encode ( v . metadata )) count = count + v . count end print ( 'You have ' .. count .. ' lockpicks) Multiple items data local inventory = Utils . InventorySearch ( 1 , { 'meat' , 'skin' }, 'deer' ) if inventory then for name , data in pairs ( inventory ) do local count = 0 for _ , v in pairs ( data ) do if v . slot then print ( v . slot .. ' contains ' .. v . count .. ' ' .. name .. ' ' .. json . encode ( v . metadata )) count = count + v . count end end print ( 'You have ' .. count .. ' ' .. name ) end end Single item count local count = Utils . InventorySearch ( 2 , 'lockpick' ) print ( 'You have ' .. count .. ' lockpicks' ) Multiple items count local inventory = Utils . InventorySearch ( 2 , { 'meat' , 'skin' }, { grade = 1 }) if inventory then for name , count in pairs ( inventory ) do print ( 'You have ' .. count .. ' ' .. name ) end end","title":"Utils.InventorySearch"},{"location":"modules/utils/client/playanim/","text":"Requests and plays an animation on the player asynchronously. Info Utils . PlayAnim ( wait , ...) Arguments Argument Type Optional Explanation wait integer no Time to wait until clearing task and animdict args any no TaskPlayAnim Example Utils . PlayAnim ( 1000 , 'pickup_object' , 'putdown_low' , 5.0 , 1.5 , 1.0 , 48 , 0.0 , 0 , 0 , 0 )","title":"Utils.PlayAnim"},{"location":"modules/utils/client/playanimadvanced/","text":"Requests and plays an advanced animation on the player asynchronously. Info Utils . PlayAnimAdvanced ( wait , ...) Arguments Argument Type Optional Explanation wait integer no Time to wait until clearing task and animdict args any no TaskPlayAnimAdvanced Example Utils . PlayAnimAdvanced ( 800 , false , 'reaction@intimidation@1h' , 'intro' , GetEntityCoords ( ESX . PlayerData . ped , true ), 0 , 0 , GetEntityHeading ( ESX . PlayerData . ped ), 8.0 , 3.0 , - 1 , 50 , 1 , 0 , 0 )","title":"Utils.PlayAnimAdvanced"},{"location":"modules/utils/shared/checktable/","text":"Checks if a value exists with a table Utils . CheckTable ( table , value ) Argument Data Type Optional table table no value any no","title":"Utils.CheckTable"},{"location":"modules/utils/shared/copytable/","text":"Copies contents of a table Utils . Copy ( table , deep ) Argument Data Type Optional Explanation table table no deep boolean yes If set to true the copy will be recursive","title":"Utils.Copy"},{"location":"modules/utils/shared/matchtables/","text":"Utils . MatchTables ( table1 , table2 ) exports . ox_inventory : MatchTables ( table1 , table2 ) Returns true or false if the two provided elements contain the exact same entries. Examples if Utils . MatchTables ( toSlot . metadata , fromSlot . metadata ) then print ( 'Item metadata perfectly matches, so they can stack' ) end","title":"Utils.MatchTables"},{"location":"modules/utils/shared/tablecontains/","text":"Utils . TableContains ( table , value ) exports . ox_inventory : TableContains ( table , value ) Returns true or false if the table contains a given value. Examples for k , v in pairs ( ESX . GetPlayerData (). Inventory ) do if v and v . name == 'meat' and Utils . TableContains ( v . metadata , { grade = 1 }) then count = count + v . count end end","title":"Utils.TableContains"}]}