{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Requirements \u00b6 OxMySQL \u00b6 A new lightweight database wrapper utilising node-mysql2 , unlike the abandoned ghmattimysql and mysql-async resources. Improved performance and compatibility Resolves issues when using MySQL 8.0 Returns callbacks immediately, removing up to 50ms overhead Lua sync wrappers utilise promises to remove additional overhead Attention Config is currently hardcoded! Modify your connection settings inside oxmysql.js Download Documentation Framework \u00b6 The inventory has been designed to work for a modified version of ESX Legacy and will not work with anything else. For convenience, we provide a fork with all necessary changes. Standard: Minimal changes to maintain near-complete compatibility with other resources Ox: Experimental branch to add new features and modify existing features, regardless of breaking compatibility Standard Experimental Modifying your framework If you insist on manually applying changes to your framework, you will need to manually reference changes in the github diff . No guide is provided. Load order ensure oxmysql ensure es_extended ensure ox_inventory Common issues \u00b6 Unable to access inventory after death You are not triggering the correct event after respawning, so the variable to store if you are dead is set as true. This is usually due to using outdated resources for ESX 1.1. You can either update your resource, or trigger the following event where appropriate. TriggerEvent ( 'esx:onPlayerSpawn' )","title":"Getting Started"},{"location":"#requirements","text":"","title":"Requirements"},{"location":"#oxmysql","text":"A new lightweight database wrapper utilising node-mysql2 , unlike the abandoned ghmattimysql and mysql-async resources. Improved performance and compatibility Resolves issues when using MySQL 8.0 Returns callbacks immediately, removing up to 50ms overhead Lua sync wrappers utilise promises to remove additional overhead Attention Config is currently hardcoded! Modify your connection settings inside oxmysql.js Download Documentation","title":"OxMySQL"},{"location":"#framework","text":"The inventory has been designed to work for a modified version of ESX Legacy and will not work with anything else. For convenience, we provide a fork with all necessary changes. Standard: Minimal changes to maintain near-complete compatibility with other resources Ox: Experimental branch to add new features and modify existing features, regardless of breaking compatibility Standard Experimental Modifying your framework If you insist on manually applying changes to your framework, you will need to manually reference changes in the github diff . No guide is provided. Load order ensure oxmysql ensure es_extended ensure ox_inventory","title":"Framework"},{"location":"#common-issues","text":"Unable to access inventory after death You are not triggering the correct event after respawning, so the variable to store if you are dead is set as true. This is usually due to using outdated resources for ESX 1.1. You can either update your resource, or trigger the following event where appropriate. TriggerEvent ( 'esx:onPlayerSpawn' )","title":"Common issues"},{"location":"functions/","text":"Ox Inventory is organised into separate files which are individually loaded and stored in a single environment through modules. While there are exceptions, most functions are included in modules and can only be accessed by including a reference to the module locally. This section will provide details on several functions that are utilised in several modules or available to use in other resources as exports. More specialised functions will be detailed as part of documentation for a specific module. Attention If the documentation for a function does not include an export then it is only intended for internal use.","title":"Index"},{"location":"functions/client/inventorysearch/","text":"Utils . InventorySearch ( searchtype , items , metadata ) exports . ox_inventory : InventorySearch ( searchtype , items , metadata ) Returns a table containing data for the searched items, the result varying based on the provided searchtype. Argument Data Type Optional Explanation searchtype integer no 1 returns slot data; 2 returns total count items string or table no An array of items to search for; permits a string for a single item metadata string or table yes A table of metadata values the item needs to contain; permits a string for metadata.type Examples local inventory = Utils . InventorySearch ( 1 , { 'meat' , 'skin' }, { grade = 1 }) if inventory then for name , data in pairs ( inventory ) do local count = 0 for _ , v in pairs ( data ) do if v . slot then print ( v . slot .. ' contains ' .. v . count .. ' ' .. name .. ' ' .. json . encode ( v . metadata )) count = count + v . count end end print ( 'You have ' .. count .. ' ' .. name ) end end local inventory = Utils . InventorySearch ( 2 , { 'meat' , 'skin' }, { grade = 1 }) if inventory then for name , count in pairs ( inventory ) do print ( 'You have ' .. count .. ' ' .. name ) end end local count = Utils . InventorySearch ( 2 , 'lockpick' )[ 'lockpick' ] print ( 'You have ' .. count .. ' lockpicks' )","title":"Utils.InventorySearch"},{"location":"functions/client/playanim/","text":"Utils . PlayAnim ( wait , ...) Plays a animation on the player ped. Argument Data Type Optional Explanation wait integer no Wait timer before clearing and cancelling the ped animation ... any no Animation options arguments, first argument must be the anim dict Example Utils . PlayAnim ( 1000 , 'pickup_object' , 'putdown_low' , 5.0 , 1.5 , 1.0 , 48 , 0.0 , 0 , 0 , 0 )","title":"Utils.PlayAnim"},{"location":"functions/client/playanimadvanced/","text":"Utils . PlayAnimAdvanced ( wait , clear , ...) Plays a advanced animation on the player ped. Argument Data Type Optional Explanation wait integer no Wait timer before clearing and cancelling the ped animation clear boolean yes If set to true will clear the animation on wait end ... any no Animation options arguments, first argument must be the anim dict Example Utils . PlayAnimAdvanced ( 800 , false , 'reaction@intimidation@cop@unarmed' or 'reaction@intimidation@1h' , 'intro' , GetEntityCoords ( ESX . PlayerData . ped , true ), 0 , 0 , GetEntityHeading ( ESX . PlayerData . ped ), 8.0 , 3.0 , - 1 , 50 , 1 , 0 , 0 )","title":"Utils.PlayAnimAdvanced"},{"location":"functions/client/progress/","text":"Progress . Start ( options , completed ) exports . ox_inventory : Progress ( options , completed ) This function will run the built in progress bar. Argument Data Type Optional Explanation options table no Option parameters for progress bar behaviour completed function no Callback function that checks if progress was completed Arguments that the options table can take: Argument Data Type Optional Explanation duration integer no Duration of the progress bar label string no Text inside the progress bar useWhileDead boolean no If set to true the progress bar can run while ped is dead canCancel boolean yes If set to true the player can cancell the progress bar Disable table yes Setting values true in the table will disable specified player actions anim table yes Animation or scenario that will play on the player ped while progress is running prop table yes Prop that will be attached to the player while the progress is running propTwo table yes Second prop that can be attached to the ped The Disable table takes move car combat mouse as keys, which are all boolean type. The anim table takes dict clip flag as keys where dict and clip are strings and flag is a integer. If neither of those keys are provided you can use add a scenario key which is a string and will play a scenario task on the ped. prop and propTwo take the exact same keys. model bone pos rot , bone, pos and rot are optional while model isn't. Model is a string while bone is a integer and both pos and rot take a xyz integer table. Example Progress . Start ({ duration = 5000 , label = 'Using Water' , useWhileDead = false , canCancel = false , Disable = { move = false , car = true , combat = true , mouse = false }, anim = { dict = 'mp_player_intdrink' , clip = 'loop_bottle' }, prop = { model = 'prop_ld_flow_bottle' , pos = { x = 0.03 , y = 0.03 , y = 0.02 }, rot = { x = 0.0 , y = 0.0 , y = - 1.5 }}, }, function ( cancel ) if cancel then used = false else used = true end end ) You can use Progress.Active to see if the progress is still running or not.","title":"Progress.Start"},{"location":"functions/shared/checktable/","text":"Checks if a value exists with a table Utils . CheckTable ( table , value ) Argument Data Type Optional table table no value any no","title":"Utils.CheckTable"},{"location":"functions/shared/copytable/","text":"Copies contents of a table Utils . Copy ( table , deep ) Argument Data Type Optional Explanation table table no deep boolean yes If set to true the copy will be recursive","title":"Utils.Copy"},{"location":"functions/shared/matchtables/","text":"Utils . MatchTables ( table1 , table2 ) exports . ox_inventory : MatchTables ( table1 , table2 ) Returns true or false if the two provided elements contain the exact same entries. Examples if Utils . MatchTables ( toSlot . metadata , fromSlot . metadata ) then print ( 'Item metadata perfectly matches, so they can stack' ) end","title":"Utils.MatchTables"},{"location":"functions/shared/tablecontains/","text":"Utils . TableContains ( table , value ) exports . ox_inventory : TableContains ( table , value ) Returns true or false if the table contains a given value. Examples for k , v in pairs ( ESX . GetPlayerData (). Inventory ) do if v and v . name == 'meat' and Utils . TableContains ( v . metadata , { grade = 1 }) then count = count + v . count end end","title":"Utils.TableContains"},{"location":"items/","text":"View module files The Items modules functionality is spread across several files. Client: Registers new items and their use functions Shared: Loads both items and weapons data files Removes information from either the client or server that isn't necessary Server: Setting item data and item metadata","title":"Index"},{"location":"items/client/","text":"The client module handles item usage. Item ( name , callback ) Sets an item as usable and defines the effects after being triggered. Argument Data Type Optional Explanation name string no The name of the item to apply the function to callback function no Performs actions before and after an item is used Example -- Receives general data about bandages, and the slot being used Item ( 'bandage' , function ( data , slot ) local maxHealth = 200 local health = GetEntityHealth ( ESX . PlayerData . ped ) -- Checks if the item meets usage requirements if health < maxHealth then -- Triggers an event to check if the item can be used and exists on the server TriggerEvent ( 'ox_inventory:item' , data , function ( data ) -- When the callback function is triggered, receive server data and trigger the use effects if data then SetEntityHealth ( ESX . PlayerData . ped , math.min ( maxHealth , math.floor ( health + maxHealth / 16 ))) TriggerEvent ( 'ox_inventory:Notify' , { text = 'You feel better already' }) end end ) end end )","title":"Creating new items"},{"location":"items/server/","text":"The server module provides both data and functions for use within the resource and externally. Triggers an event after resource initialisation to receive the item list in another resource Registers items using ESX item callbacks as usable Automatically dumps the items database into the items data file Applies default metadata values for specified items Allows lookup of item data Items ( name ) exports . ox_inventory : Items ( name ) Returns general data for the given item name, or all data if no argument is provided. Argument Data Type Optional Explanation name string yes Name of the item to receive data for Example local item , itemtype = Items ( name ) if item then print ( item . name , item . weight , itemtype ) end Item Type Explanation nil Item 1 Weapon 2 Ammo 3 Component","title":"Server item handling"},{"location":"modules/","text":"","title":"Index"},{"location":"modules/utils/","text":"","title":"Index"},{"location":"modules/utils/inventorysearch/","text":"Returns a table containing data for the searched items, the result varying based on the provided searchtype. Info Utils . InventorySearch ( searchtype , items , metadata ) exports . ox_inventory : InventorySearch ( searchtype , items , metadata ) !!! summary \"Arguments\" preserve_tabs | Argument | Type | Optional | Explanation | | ---------- | ------------ | -------- | ----------- | | searchtype | integer | no | 1: Returns slots and data, 2: Returns total count of item | | items | string/table | no | The name of an item - or array of item names - to search for | | metadata | string/table | yes | Required metadata values that must exist on an item to return data | Example Single item data local lockpick = Utils . InventorySearch ( 1 , 'lockpick' ) local count = 0 for _ , v in pairs ( lockpick ) do print ( v . slot .. ' contains ' .. v . count .. ' lockpicks ' .. json . encode ( v . metadata )) count = count + v . count end print ( 'You have ' .. count .. ' lockpicks) Multiple items data local inventory = Utils . InventorySearch ( 1 , { 'meat' , 'skin' }, { grade = 1 }) if inventory then for name , data in pairs ( inventory ) do local count = 0 for _ , v in pairs ( data ) do if v . slot then print ( v . slot .. ' contains ' .. v . count .. ' ' .. name .. ' ' .. json . encode ( v . metadata )) count = count + v . count end end print ( 'You have ' .. count .. ' ' .. name ) end end Single item count local count = Utils . InventorySearch ( 2 , 'lockpick' ) print ( 'You have ' .. count .. ' lockpicks' ) Multiple items count local inventory = Utils . InventorySearch ( 2 , { 'meat' , 'skin' }, { grade = 1 }) if inventory then for name , count in pairs ( inventory ) do print ( 'You have ' .. count .. ' ' .. name ) end end","title":"Utils.InventorySearch"},{"location":"modules/utils/playanim/","text":"Utils . PlayAnim ( wait , ...) Plays a animation on the player ped. Argument Data Type Optional Explanation wait integer no Wait timer before clearing and cancelling the ped animation ... any no Animation options arguments, first argument must be the anim dict Example Utils . PlayAnim ( 1000 , 'pickup_object' , 'putdown_low' , 5.0 , 1.5 , 1.0 , 48 , 0.0 , 0 , 0 , 0 )","title":"Utils.PlayAnim"},{"location":"modules/utils/playanimadvanced/","text":"Utils . PlayAnimAdvanced ( wait , clear , ...) Plays a advanced animation on the player ped. Argument Data Type Optional Explanation wait integer no Wait timer before clearing and cancelling the ped animation clear boolean yes If set to true will clear the animation on wait end ... any no Animation options arguments, first argument must be the anim dict Example Utils . PlayAnimAdvanced ( 800 , false , 'reaction@intimidation@cop@unarmed' or 'reaction@intimidation@1h' , 'intro' , GetEntityCoords ( ESX . PlayerData . ped , true ), 0 , 0 , GetEntityHeading ( ESX . PlayerData . ped ), 8.0 , 3.0 , - 1 , 50 , 1 , 0 , 0 )","title":"Utils.PlayAnimAdvanced"}]}