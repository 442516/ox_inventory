{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Danger Not ready for production servers - this resource is still being developed This resource is being designed with ease of use and advanced functionality as a core principal, however that doesn't mean it is intended for config kings . If you do not possess a basic understanding of coding - nor the ability to read documentation - then turn back now and go use a drag-n-drop resource instead. Requirements \u00b6 OxMySQL \u00b6 A new lightweight database wrapper utilising node-mysql2 , unlike the abandoned ghmattimysql and mysql-async resources. Improved performance and compatibility Resolves issues when using MySQL 8.0 Returns callbacks immediately, removing up to 50ms overhead Lua sync wrappers utilise promises to remove additional overhead Attention Modify your server config with a URI-style connection string. You can also set a warning for slow queries. set mysql_connection_string \"mysql://user:password@host/database?charset=utf8mb4\" set mysql_slow_query_warning 100 Download Documentation Framework \u00b6 The inventory has been designed to work for a modified version of ESX Legacy and will not work with anything else. For convenience, we provide a fork with all necessary changes. Standard \u00b6 Minimal changes to maintain near-complete compatibility with other resources. This matches the behaviour of Linden ESX. Loadouts do not exist, so errors will occur in third-party resources attempting to manipulate them Inventories are slot-based and items can exist in multiple slots, which can throw off item counting Resources attempting to iterate through inventories in order will not work if a slot is empty Ox \u00b6 Experimental branch to add new features and modify existing features, regardless of breaking compatibility. Jobs are loaded from a data file instead of the database Grades start from 1 instead of 0, and are stored as integers rather than strings Modifying your framework If you insist on manually applying changes to your framework, you will need to manually reference changes in the github diff . No guide is provided. Standard Experimental Installation \u00b6 Once you have downloaded and configured the required resources, you will need to update your server config. ensure oxmysql ensure es_extended ensure ox_inventory Fresh ESX install Run the query inside setup/install.sql That is all? Converting ESX inventories Run the query inside setup/install.sql Open fxmanifest.lua and uncomment server_script 'setup/convert.lua' Start the server and type convertinventory into the server console Comment out the conversion file Upgrading from Linden Inventory Run the query inside setup/upgrade.sql Open fxmanifest.lua and uncomment server_script 'setup/convert.lua' Start the server and type convertinventory linden into the server console Comment out the conversion file Keep the following in mind while developing your server ESX loadouts do not exist - resources that use them need to remove references or be modified to look for the item Built-in stashes should replace inventories used by resources such as esx_policejob, esx_taxijob, etc. Built-in shops should replace esx_shops and the esx_policejob armory, etc. You shouldn't be using esx_trunkinventory, esx_inventoryhud, or any other resources that provide conflicting functionality Attention You should restart your server after the first startup to ensure everything has been correctly setup","title":"Getting Started"},{"location":"#requirements","text":"","title":"Requirements"},{"location":"#oxmysql","text":"A new lightweight database wrapper utilising node-mysql2 , unlike the abandoned ghmattimysql and mysql-async resources. Improved performance and compatibility Resolves issues when using MySQL 8.0 Returns callbacks immediately, removing up to 50ms overhead Lua sync wrappers utilise promises to remove additional overhead Attention Modify your server config with a URI-style connection string. You can also set a warning for slow queries. set mysql_connection_string \"mysql://user:password@host/database?charset=utf8mb4\" set mysql_slow_query_warning 100 Download Documentation","title":"OxMySQL"},{"location":"#framework","text":"The inventory has been designed to work for a modified version of ESX Legacy and will not work with anything else. For convenience, we provide a fork with all necessary changes.","title":"Framework"},{"location":"#standard","text":"Minimal changes to maintain near-complete compatibility with other resources. This matches the behaviour of Linden ESX. Loadouts do not exist, so errors will occur in third-party resources attempting to manipulate them Inventories are slot-based and items can exist in multiple slots, which can throw off item counting Resources attempting to iterate through inventories in order will not work if a slot is empty","title":"Standard"},{"location":"#ox","text":"Experimental branch to add new features and modify existing features, regardless of breaking compatibility. Jobs are loaded from a data file instead of the database Grades start from 1 instead of 0, and are stored as integers rather than strings Modifying your framework If you insist on manually applying changes to your framework, you will need to manually reference changes in the github diff . No guide is provided. Standard Experimental","title":"Ox"},{"location":"#installation","text":"Once you have downloaded and configured the required resources, you will need to update your server config. ensure oxmysql ensure es_extended ensure ox_inventory Fresh ESX install Run the query inside setup/install.sql That is all? Converting ESX inventories Run the query inside setup/install.sql Open fxmanifest.lua and uncomment server_script 'setup/convert.lua' Start the server and type convertinventory into the server console Comment out the conversion file Upgrading from Linden Inventory Run the query inside setup/upgrade.sql Open fxmanifest.lua and uncomment server_script 'setup/convert.lua' Start the server and type convertinventory linden into the server console Comment out the conversion file Keep the following in mind while developing your server ESX loadouts do not exist - resources that use them need to remove references or be modified to look for the item Built-in stashes should replace inventories used by resources such as esx_policejob, esx_taxijob, etc. Built-in shops should replace esx_shops and the esx_policejob armory, etc. You shouldn't be using esx_trunkinventory, esx_inventoryhud, or any other resources that provide conflicting functionality Attention You should restart your server after the first startup to ensure everything has been correctly setup","title":"Installation"},{"location":"issues/","text":"Unable to access inventory after death \u00b6 You are not triggering the correct event after respawning, so the variable to store if you are dead is set as true. This is usually due to using outdated resources for ESX 1.1. Solution You can either update your resource, or trigger the following event where appropriate. TriggerEvent ( 'esx:onPlayerSpawn' )","title":"Common issues"},{"location":"issues/#unable-to-access-inventory-after-death","text":"You are not triggering the correct event after respawning, so the variable to store if you are dead is set as true. This is usually due to using outdated resources for ESX 1.1. Solution You can either update your resource, or trigger the following event where appropriate. TriggerEvent ( 'esx:onPlayerSpawn' )","title":"Unable to access inventory after death"},{"location":"misc/","text":"This category provides information on exports, commands, and events that are not covered under modules. Server Callbacks \u00b6 We've implemented a system similar to ESX callbacks within the inventory. You can use both standard callbacks and Await callbacks. ox_inventory:getItemCount Standard ox . TriggerServerCallback ( 'ox_inventory:getItemCount' , callback , item , metadata , target ) ox . TriggerServerCallback ( 'ox_inventory:getItemCount' , function ( count ) print ( 'You currently have ' .. count .. ' water' ) end , 'water' ) ox . TriggerServerCallback ( 'ox_inventory:getItemCount' , function ( count ) print ( 'Trunk contains ' .. count .. ' water' ) end , 'water' , false , trunkEGZ 202 ) local count = ox . TriggerServerCallback ( 'ox_inventory:getItemCount' , 'water' , false , 'trunkEGZ 202' ) Await ox . AwaitServerCallback ( 'ox_inventory:getItemCount' , item , metadata , target ) print ( 'You have ' .. ox . AwaitServerCallback ( 'ox_inventory:getItemCount' , 'water' ) .. ' water' ) local count = ox . AwaitServerCallback ( 'ox_inventory:getItemCount' , 'water' , false , 'trunkEGZ 202' ) print ( 'Trunk contains ' .. count .. ' water' ) ox_inventory:getInventory ox . AwaitServerCallback ( 'ox_inventory:getInventory' , item , metadata , target ) local inventory = ox . AwaitServerCallback ( 'ox_inventory:getInventory' , 'trunkEGZ 202' ) if inventory then print (( 'Inventory %s has the %s type, is able to hold up to %sg in %s different slots. \\n Current weight: %sg' ): format ( inventory . id , inventory . type , inventory . maxWeight , inventory . slots , inventory . weight )) end","title":"Index"},{"location":"misc/#server-callbacks","text":"We've implemented a system similar to ESX callbacks within the inventory. You can use both standard callbacks and Await callbacks. ox_inventory:getItemCount Standard ox . TriggerServerCallback ( 'ox_inventory:getItemCount' , callback , item , metadata , target ) ox . TriggerServerCallback ( 'ox_inventory:getItemCount' , function ( count ) print ( 'You currently have ' .. count .. ' water' ) end , 'water' ) ox . TriggerServerCallback ( 'ox_inventory:getItemCount' , function ( count ) print ( 'Trunk contains ' .. count .. ' water' ) end , 'water' , false , trunkEGZ 202 ) local count = ox . TriggerServerCallback ( 'ox_inventory:getItemCount' , 'water' , false , 'trunkEGZ 202' ) Await ox . AwaitServerCallback ( 'ox_inventory:getItemCount' , item , metadata , target ) print ( 'You have ' .. ox . AwaitServerCallback ( 'ox_inventory:getItemCount' , 'water' ) .. ' water' ) local count = ox . AwaitServerCallback ( 'ox_inventory:getItemCount' , 'water' , false , 'trunkEGZ 202' ) print ( 'Trunk contains ' .. count .. ' water' ) ox_inventory:getInventory ox . AwaitServerCallback ( 'ox_inventory:getInventory' , item , metadata , target ) local inventory = ox . AwaitServerCallback ( 'ox_inventory:getInventory' , 'trunkEGZ 202' ) if inventory then print (( 'Inventory %s has the %s type, is able to hold up to %sg in %s different slots. \\n Current weight: %sg' ): format ( inventory . id , inventory . type , inventory . maxWeight , inventory . slots , inventory . weight )) end","title":"Server Callbacks"},{"location":"misc/client/disarm/","text":"Forces the player to holster their current weapon. This should be used instead of usual natives. Info Disarm () TriggerEvent ( 'ox_inventory:disarm' ) This event is networked and can be triggered from the server.","title":"Disarm"},{"location":"misc/client/notify/","text":"Triggers the builtin notification system, utilising react-hot-toast . Info Notify ( data ) exports . ox_inventory : Notify ( data ) TriggerEvent ( 'ox_inventory:notify' , data ) This event is networked and can be triggered from the server. Options Explanation type undefined, success, error text Message to display duration Display time of notification position Where to display the notification style Custom CSS styling to apply Example Notify ({ type = 'error' , text = 'Lost access to the target inventory' , duration = 2500 })","title":"Notify"},{"location":"misc/client/setbusy/","text":"Prevents the use of items, accessing inventories, and shooting. Info SetBusy ( state ) exports . ox_inventory : SetBusy ( state ) Statebag In addition to updating the local variable isBusy , this function also sets a non-replicated statebag. if LocalPlayer . state . isBusy then print ( 'You are currently busy' ) end","title":"SetBusy"},{"location":"modules/","text":"Ox Inventory is organised into separate files which are loaded and stored in a single environment as modules. Most functions are included as part of a module and can only be accessed by storing a local reference to the module. This section will provide details on several functions that are utilised in several modules or available to use in other resources as exports. Attention If the documentation for a function does not include an export then it is only intended for internal use.","title":"Overview"},{"location":"modules/inventory/client/inventorysearch/","text":"Returns a table containing data for the searched items, the result varying based on the provided searchtype. Info Inventory . Search ( searchtype , items , metadata ) exports . ox_inventory : InventorySearch ( searchtype , items , metadata ) Argument Type Optional Explanation searchtype integer no 1: Returns slots and data, 2: Returns total count of item items table no Array of item names to search for metadata table yes Metadata pairs that must exist on the found item Items and metadata will accept a string, though it limits you to searching for metadata.type Example Single item data local water = Inventory . Search ( 1 , 'water' ) local count = 0 for _ , v in pairs ( water ) do print ( v . slot .. ' contains ' .. v . count .. ' water ' .. json . encode ( v . metadata )) count = count + v . count end print ( 'You have ' .. count .. ' water' ) Multiple items data local inventory = Inventory . Search ( 1 , { 'meat' , 'skin' }, 'deer' ) if inventory then for name , data in pairs ( inventory ) do local count = 0 for _ , v in pairs ( data ) do if v . slot then print ( v . slot .. ' contains ' .. v . count .. ' ' .. name .. ' ' .. json . encode ( v . metadata )) count = count + v . count end end print ( 'You have ' .. count .. ' ' .. name ) end end Single item count local count = Inventory . Search ( 2 , 'water' ) print ( 'You have ' .. count .. ' water' ) Multiple items count local inventory = Inventory . Search ( 2 , { 'meat' , 'skin' }, { grade = 1 }) if inventory then for name , count in pairs ( inventory ) do print ( 'You have ' .. count .. ' ' .. name ) end end","title":"Inventory.Search"},{"location":"modules/inventory/server/","text":"The inventory module handles most inventory-related functions and stores all current inventory data. Many of the functions provided in this module are similar to the xPlayer functions, however they can be used for non-player inventories too. Info Inventory ( id ) exports . ox_inventory : Inventory ( id ) The argument is optional - by providing it you will receive a specific inventory object, otherwise you gain access to all module functions. Example local Inventory = exports . ox_inventory : Inventory () Inventory . AddItem ( 1 , 'water' , 1 ) print ( json . encode ( exports . ox_inventory : Inventory ( 1 ). items )) The first export grants access to all the functions (you don't have to define it locally). After adding an item to the inventory, the second export will retrieve inventory id 1 and print out all items. Danger The following functions are intended for internal use only . They are documented here for convenience. Using or modifying these functions may break intended functionality. Module functions \u00b6 Info Inventory . SyncInventory ( xPlayer , inv ) Updates the xPlayer with correct inventory, weight, maxWeight, and accounts values. Info Inventory . SetSlot ( inv , item , count , metadata , slot ) Sets the current item, count, and metadata of a slot. Info Inventory . SlotWeight ( item , slot ) Updates the weight values of a slot depending on item count, ammo, and metadata. Info Inventory . Remove ( id , type ) Deletes the inventory for the provided id. Ensures drops are removed from clients. Info Inventory . Save ( inv ) Saves an inventory to the database immediately. Info Inventory . Load ( id , inv , owner ) Loads an inventory from the database.","title":"Server module"},{"location":"modules/inventory/server/#module-functions","text":"Info Inventory . SyncInventory ( xPlayer , inv ) Updates the xPlayer with correct inventory, weight, maxWeight, and accounts values. Info Inventory . SetSlot ( inv , item , count , metadata , slot ) Sets the current item, count, and metadata of a slot. Info Inventory . SlotWeight ( item , slot ) Updates the weight values of a slot depending on item count, ammo, and metadata. Info Inventory . Remove ( id , type ) Deletes the inventory for the provided id. Ensures drops are removed from clients. Info Inventory . Save ( inv ) Saves an inventory to the database immediately. Info Inventory . Load ( id , inv , owner ) Loads an inventory from the database.","title":"Module functions"},{"location":"modules/inventory/server/additem/","text":"Adds an item to the provided inventory. Info Inventory . AddItem ( inv , item , count , metadata , slot ) This function enhances the default functionality of xPlayer.addInventoryItem .","title":"Inventory.AddItem"},{"location":"modules/inventory/server/cancarryitem/","text":"Checks if the provided inventory is capable of holding new items. Info Inventory . CanCarryItem ( inv , item , count , metadata ) This function enhances the default functionality of xPlayer.canCarryItem . Argument Type Optional Explanation inv id no Which inventory to check item string no Name of the item count number no Number of items metadata table yes Metadata values to compare Example local item = Inventory . GetItem ( 2 , 'bread' ) if item and item . count > 5 then if Inventory . CanCarryItem ( 1 , 'bread' 5 ) then Inventory . RemoveItem ( 2 , 'bread' ) Inventory . AddItem ( 1 , 'bread' ) else print ( Inventory ( 1 ). label .. ' is unable to carry 5 bread' ) end else print ( Inventory ( 2 ). label .. ' does not have 5 bread' ) end","title":"Inventory.CanCarryItem"},{"location":"modules/inventory/server/canswapitem/","text":"Checks if the provided inventory is capable of swapping out different items. Info Inventory . CanSwapItem ( inv , firstItem , firstItemCount , testItem , testItemCount ) This function enhances the default functionality of xPlayer.canSwapItem .","title":"Inventory.CanSwapItem"},{"location":"modules/inventory/server/create/","text":"Creates a new inventory from the given arguments. Info Inventory . Create ( id , label , type , slots , weight , maxWeight , owner , items ) Argument Type Optional Explanation id integer no A unique identifier for the inventory to create label string yes A generic name for the inventory to display type string no The inventory's type (player, stash, etc) slots integer no Total number of unique slots weight integer no Weight of contents (usually 0) maxWeight integer no Total weight inventory can hold owner string yes Identifier for the inventory's owner items table yes Items to load into the inventory If no value is submitted for items then it will attempt to load them from the database instead. Class methods \u00b6 These functions are self-referencing, and allow setting or getting data from other resources, or triggering effects when updating a value. Info Inventory : set ( key , value ) Updates the key to reflect the new value. When closing an inventory it updates the time an inventory was last accessed, and deletes empty drops. Info Inventory : get ( key ) Gets the current value of a key. Generally not needed (you can reference Inventory.key instead). Info Inventory : minimal () Returns a \"minimal\" inventory, with most data removed. Generally used when saving to the database.","title":"Inventory.Create"},{"location":"modules/inventory/server/create/#class-methods","text":"These functions are self-referencing, and allow setting or getting data from other resources, or triggering effects when updating a value. Info Inventory : set ( key , value ) Updates the key to reflect the new value. When closing an inventory it updates the time an inventory was last accessed, and deletes empty drops. Info Inventory : get ( key ) Gets the current value of a key. Generally not needed (you can reference Inventory.key instead). Info Inventory : minimal () Returns a \"minimal\" inventory, with most data removed. Generally used when saving to the database.","title":"Class methods"},{"location":"modules/inventory/server/customdrop/","text":"Allows server-side creation of a drop with pre-defined items and a custom prefix. Info TriggerEvent ( 'ox_inventory:customDrop' , prefix , items , coords , slots , maxWeight ) Argument Type Default Optional Explanation prefix string - no Label text before the drop id items table - no An array of items to add (more below) coords vector3 - no Where should the drop be created slots integer Config.PlayerSlots yes How many slots are in the drop maxWeight integer Config.DefaultWeight yes How much weight can be stored Defining items TriggerEvent ( 'ox_inventory:customDrop' , 'Carcass' , { { 'meat' , 5 , { grade = 2 , type = 'deer' }}, { 'hide' , 5 , { grade = 2 , type = 'deer' }} }, entityCoords ) Creates a \"Carcass\" drop on some supplied coordinates, containing meat and hide from a deer. Option Type Optional Explanation 1 string no Name of the item to add 2 integer no Number of items to add 3 table yes Metadata table to apply to the item","title":"Creating custom drops"},{"location":"modules/inventory/server/getitem/","text":"Searches an inventory for an item, returning generic item data and the count. Info Inventory . GetItem ( inv , item , metadata ) This function enhances the default functionality of xPlayer.getInventoryItem .","title":"Inventory.GetItem"},{"location":"modules/inventory/server/removeitem/","text":"Removes an item from the provided inventory. Info Inventory . RemoveItem ( inv , item , count , metadata , slot ) This function enhances the default functionality of xPlayer.removeInventoryItem .","title":"Inventory.RemoveItem"},{"location":"modules/inventory/server/setitem/","text":"Sets the total count of an item in the given inventory, either adding or removing as necessary. Info Inventory . SetItem ( inv , item , count , metadata ) This function enhances the default functionality of xPlayer.setInventoryItem .","title":"Inventory.SetItem"},{"location":"modules/items/client/create/","text":"All static item data is loaded from files in the data folder rather than the database. The item table defines a basic template to reference when working with an instance of that item name, and can contain custom data. Example Standard Burger A normal burger item, as it appears in data/items.lua [ 'burger' ] = { label = 'Burger' , weight = 220 , stack = true , close = true , client = { status = { hunger = 200000 }, anim = { dict = 'mp_player_inteat@burger' , clip = 'mp_player_int_eat_burger_fp' }, prop = { model = 'prop_cs_burger_01' , pos = { x = 0.02 , y = 0.02 , y = - 0.02 }, rot = { x = 0.0 , y = 0.0 , y = 0.0 } }, usetime = 2500 , } } Custom Burger A modified burger item, with a description and custom crafting table. [ 'burger' ] = { label = 'Burger' , description = 'Just what is the secret formula?' weight = 220 , stack = true , close = true , client = { status = { hunger = 200000 }, anim = { dict = 'mp_player_inteat@burger' , clip = 'mp_player_int_eat_burger_fp' }, prop = { model = 'prop_cs_burger_01' , pos = { x = 0.02 , y = 0.02 , y = - 0.02 }, rot = { x = 0.0 , y = 0.0 , y = 0.0 } }, usetime = 2500 , } crafting = { [ 'bun' ] = 2 , [ 'ketchup' ] = 1 , [ 'mustard' ] = 1 , [ 'cheese' ] = 1 , [ 'pickles' ] = 1 , [ 'lettuce' ] = 1 , [ 'tomato' ] = 1 , [ 'onion' ] = 1 , } } Combined with several new functions and events you could easily create a crafting system. Standard options Shared Argument Optional Default Explanation label no - The display text for an item weight yes 0 The weight of an item in grams stack yes true Does the item stack with others of the same type close yes true Does the item close the inventory if used description yes - Text to display in the item tooltip consume yes 1 Number of an item needed to use it, and removed after use client yes - Options accessible only to the client server yes - Options accessible only to the server Client Argument Explanation event Trigger a client event after use status Adjust esx_status values after use anim Animation during progress bar prop Attached entity during progress bar disable Disable actions during progress bar usetime Time for progress bar to complete cancel Able to cancel progress bar","title":"Create items"},{"location":"modules/items/client/usable/","text":"The recommended method for registering items as usable is adding a function to modules/items/client.lua . It is still possible to use items through ESX.RegisterUsableItem, though it is less flexible. Info Item ( name , callback ) Argument Data Type Optional Explanation name string no The name of the item to apply the function to callback function no Creates a function to be triggered when an item is used Example Sample Item ( name , function ( data , slot ) -- Trigger on use TriggerEvent ( 'ox_inventory:item' , data , function ( data ) -- Trigger after use end ) end ) Example Item ( 'bandage' , function ( data , slot ) local maxHealth = 200 local health = GetEntityHealth ( ESX . PlayerData . ped ) if health < maxHealth then TriggerEvent ( 'ox_inventory:item' , data , function ( data ) if data then SetEntityHealth ( ESX . PlayerData . ped , math.min ( maxHealth , math.floor ( health + maxHealth / 16 ))) TriggerEvent ( 'ox_inventory:Notify' , { text = 'You feel better already' }) end end ) end end )","title":"Register usable items"},{"location":"modules/items/server/","text":"The server-side items module loads general item data, provides functions for manipulating items, and completes the startup process. Retrieve item data \u00b6 Info Items ( name ) exports . ox_inventory : Items ( name ) The argument is optional and, if ignored, will return the full items list. Example local item , itemtype = Items ( name ) if item then print ( item . name , item . weight , itemtype ) end Item Type Explanation nil Item 1 Weapon 2 Ammo 3 Component","title":"Server module"},{"location":"modules/items/server/#retrieve-item-data","text":"Info Items ( name ) exports . ox_inventory : Items ( name ) The argument is optional and, if ignored, will return the full items list. Example local item , itemtype = Items ( name ) if item then print ( item . name , item . weight , itemtype ) end Item Type Explanation nil Item 1 Weapon 2 Ammo 3 Component","title":"Retrieve item data"},{"location":"modules/items/server/newmetadata/","text":"This function is used internally when adding or buying items to define metadata. You can add additional items here to give them new default values. Info Items . Metadata ( xPlayer , item , metadata , count ) | Argument | Type | Explanation | | ---------- | ----------- | | xPlayer | class | Player triggering the function | | item | table | The item being manipulated | | metadata | Extra metadata to be added to the item | | count | Number of items to be added |","title":"Defining default metadata"},{"location":"modules/keyboard/input/","text":"Window component that retuns values of input fields Info Keyboard . Input ( header , rows ) exports . ox_inventory : Keyboard ( header , rows ) Argument Type Optional Explanation header string no Header title of the window rows table no Table of strings, each adding a new row Info The function is sync , returned value is a table if at least one input field had a value in it upon submitting, otherwise returned value is nil Example local data = Keyboard . Input ( 'Evidence Locker' , { 'Locker number' }) if data then local lockerNum = data [ 1 ] else print ( 'No value was entered into the field!' ) end","title":"Keyboard.Input"},{"location":"modules/progress/","text":"Cancels the current progress bar, if it can be cancelled. This function is bound to the X key with RegisterKeyMapping. Info Progress . Cancel () exports . ox_inventory : ProgressCancel ()","title":"Progress.Cancel"},{"location":"modules/progress/active/","text":"Returns the current state of the progress bar (active, inactive). Info Progress . Active exports . ox_inventory : ProgressActive ()","title":"Progress.Active"},{"location":"modules/progress/start/","text":"Starts the progress bar and prevents some actions such as opening the inventory, reloading, etc. Info Progress . Start ( options , completed ) exports . ox_inventory : Progress ( options , completed ) Argument Type Optional Explanation options table no Change the progress bar behaviour completed function no Callback function after completing the progress timer Options Argument Type Optional Explanation duration integer no Time it takes for the bar to callback in milliseconds label string no Text to display on progress bar useWhileDead boolean yes Able to perform an action while dead canCancel boolean yes Can cancel the progress bar anim table yes Perform an animation or scenario prop table yes Attach a prop to the player propTwo table yes Attach a prop to the player disable table yes Disable control actions while active Example Progress . Start ({ duration = 2000 , label = 'Drinking water' , useWhileDead = false , canCancel = true , disable = { move = false , car = true , combat = true , mouse = false }, anim = { dict = 'mp_player_intdrink' , clip = 'loop_bottle' , flags = 49 , }, prop = { model = 'prop_ld_flow_bottle' , pos = { x = 0.03 , y = 0.03 , y = 0.02 }, rot = { x = 0.0 , y = 0.0 , y = - 1.5 }, bone = 58866 }, }, function ( cancel ) if not cancel then print ( \"You drank some water - that'll quench ya!\" ) end end )","title":"Progress.Start"},{"location":"modules/utils/client/playanim/","text":"Requests and plays an animation on the player asynchronously. Info Utils . PlayAnim ( wait , ...) Argument Type Optional Explanation wait integer no Time to wait until clearing task and animdict args any no TaskPlayAnim Example Utils . PlayAnim ( 1000 , 'pickup_object' , 'putdown_low' , 5.0 , 1.5 , 1.0 , 48 , 0.0 , 0 , 0 , 0 )","title":"Utils.PlayAnim"},{"location":"modules/utils/client/playanimadvanced/","text":"Requests and plays an advanced animation on the player asynchronously. Info Utils . PlayAnimAdvanced ( wait , ...) Argument Type Optional Explanation wait integer no Time to wait until clearing task and animdict args any no TaskPlayAnimAdvanced Example Utils . PlayAnimAdvanced ( 800 , false , 'reaction@intimidation@1h' , 'intro' , GetEntityCoords ( ESX . PlayerData . ped , true ), 0 , 0 , GetEntityHeading ( ESX . PlayerData . ped ), 8.0 , 3.0 , - 1 , 50 , 1 , 0 , 0 )","title":"Utils.PlayAnimAdvanced"},{"location":"modules/utils/shared/checktable/","text":"Interate through a table and checks if it contains a value. Info Utils . CheckTable ( table , value ) Argument Data Type Optional table table no value any no","title":"Utils.CheckTable"},{"location":"modules/utils/shared/copytable/","text":"Creates a duplicate of another table without references. Info Utils . Copy ( table , deep ) Argument Data Type Optional Explanation table table no deep boolean yes If set to true the copy will be recursive","title":"Utils.Copy"},{"location":"modules/utils/shared/matchtables/","text":"Returns true if the two provided tables contain the exact same entries. Info Utils . MatchTables ( table1 , table2 ) exports . ox_inventory : MatchTables ( table1 , table2 )","title":"Utils.MatchTables"},{"location":"modules/utils/shared/tablecontains/","text":"Returns true if the first table contains all the elements from the second table. Info Utils . TableContains ( table1 , table2 ) exports . ox_inventory : TableContains ( table1 , table2 ) Example for k , v in pairs ( ESX . GetPlayerData (). Inventory ) do if v . name == 'meat' and Utils . TableContains ( v . metadata , { grade = 1 }) then count = count + v . count end end","title":"Utils.TableContains"}]}