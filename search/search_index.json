{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Warning Documentation is still being improved - you may find some information lacking or missing. This resource is being designed with the intention of providing advanced functionality while remaining easy to use, however it is not recommended for beginners. You must possess a basic understanding of coding and the ability to read ; otherwise you should not install this resource. Dependencies \u00b6 FXServer \u00b6 The minimum required version of FXServer is build 5053 , anything earlier will prevent the resource from starting. OxMySQL \u00b6 We utilise our own resource to communicate with MySQL databases via the node-mysql2 package. The backend is actively maintained and updated unlike the package used by mysql-async, providing improved performance, security, and features. We provide full backwards compatibility with mysql-async and build for the current Cfx architecture. GitHub Documentation Lua Library \u00b6 A resource designed to provide reusable functions that can be loaded into any resource with simple variable declarations rather than through fxmanifest. Still a work in progress. Currently used for SetInterval Server Callbacks Table utilities (contains, matches) Requesting models, animations, etc. Disabling control actions GitHub \"Ox\" ESX \u00b6 The inventory is being moved towards a standalone design, with compatibility for a modified version of ESX Legacy . For convenience, we provide a fork with all the necessary changes as well as several new features and performance improvements. There should be no changes which break compatibility with other resources with the exception of what is necessary to support the inventory and new item system. Loadouts do not exist, so errors may occur if a third-party resource attempts to manipulate them Inventories are slot-based and items can exist in multiple slots, which can throw off item counting Resources attempting to iterate through inventories in order will not work if a slot is empty We are in the process of converting some common ESX resources to better support our releases. Some code is being changed for later reference while a txAdmin recipe is prepared. - esx_status: fixed some bugs and rework for oxmysql - esx_addoninventory: registers addon_inventory inventories as valid stash targets Modifying your framework We do not provide a guide for manually converting your ESX to support Ox Inventory; instead you will need to manually reference changes in the github diff . This may change sometime after release when we have finalised the necessary changes. GitHub Optional resources \u00b6 qtarget \u00b6 A high performance targeting solution based on bt-target, and the basis for qb-target. It is being updated alongside Ox Inventory to improve support as well as add compatibility when using QBCore or migrating from bt-target. All stashes and shops will utilise PolyZone's instead of markers to interact with them. Attention If you wish to use it first you must ensure that qtarget is enabled in the resource convars. You will need to enable compatibility manually by adjusting your config - more information provided below. You must start qtarget before the inventory and after es_extended. GitHub Configuration \u00b6 Default inventory settings are stored in config.lua , however the recommended method of overriding them is through convars. You can either add these directly to your server.cfg , or create a file called .cfg in the resource folder. You can add these settings directly to your 'server.cfg', or create a new (or multiple) file to load with 'exec' setr ox_inventory { \"esx\": true, \"trimplate\": true, \"qtarget\": false, \"playerslots\": 50, \"blurscreen\": true, \"autoreload\": true, \"keys\": [ \"F2\", \"K\", \"TAB\" ], \"enablekeys\": [ 249 ], \"playerweight\": 30000, \"police\": \"police\", \"locale\": \"en\" } set ox_inventory_server { \"versioncheck\": true, \"clearstashes\": \"6 MONTH\", \"logs\": false, \"randomprice\": true, \"evidencegrade\": 2, \"randomloot\": true } set ox_inventory_loot { \"vehicle\": [ [\"cola\", 1, 1], [\"water\", 1, 1], [\"garbage\", 1, 2, 50], [\"panties\", 1, 1, 5], [\"money\", 1, 50], [\"money\", 200, 400, 5], [\"bandage\", 1, 1] ], \"dumpster\": [ [\"mustard\", 1, 1], [\"garbage\", 1, 3], [\"money\", 1, 10], [\"burger\", 1, 1] ] } add_principal group.admin ox_inventory add_ace resource.ox_inventory command.add_principal allow add_ace resource.ox_inventory command.remove_principal allow ensure ox_inventory Installation \u00b6 Fresh ESX Download our fork of ESX Execute the query inside install.sql Convert ESX Download our fork of ESX Execute the query inside install.sql Open fxmanifest.lua and uncomment server_script 'setup/convert.lua' Start the server and execute the convertinventory command from the console Remove the conversion file Upgrade from Linden Inventory Execute the query inside upgrade.sql Open fxmanifest.lua and uncomment server_script 'setup/convert.lua' Start the server and execute the convertinventory linden command from the console Remove the conversion file This will not update your items file and old items may be incompatible; refer to documentation for item creation Attention You should restart your server after the first startup to ensure everything has been correctly setup Upgrading ESX \u00b6 Ox Inventory provides a complete suite of tools to replace the built-in items and inventory system from ESX, and is not intended to be used with resources designed around it. ESX loadouts do not exist - resources that use them need to remove references or be modified to look for the weapon as an item Stashes from resources such as esx_policejob, esx_ambulancejob, etc. should be removed Shops from esx_shops or the armoury from esx_policejob should be removed Resources like esx_inventoryhud, esx_trunkinventory, esx_addoninventory, etc. should be removed xPlayer vs exports.ox_inventory \u00b6 All item related functions from xPlayer, such as xPlayer.getInventoryItem , have been modified for compatibility purposes; however they are considered deprecated. The reasoning is fairly simple - there's now additional function references and overhead to consider. Fortunately, the new Inventory functions can be used directly and offer a great deal of improvements over the old ones. You should read through the modules section for further information, but the following should give you a decent idea. xPlayer.getInventoryItem and xPlayer.removeInventoryItem ESX if xPlayer . getInventoryItem ( 'acetone' ). count > 2 and xPlayer . getInventoryItem ( 'antifreeze' ). count > 4 and xPlayer . getInventoryItem ( 'sudo' ). count > 9 then xPlayer . removeInventoryItem ( \"acetone\" , 3 ) xPlayer . removeInventoryItem ( \"antifreeze\" , 5 ) xPlayer . removeInventoryItem ( \"sudo\" , 10 ) end Inventory Add the following code somewhere in your resource to cache the exports metatable. local ox_inventory = exports . ox_inventory You will be able to reference any functions exposed through the export. local items = ox_inventory : Search ( source , 'count' , { 'acetone' , 'antifreeze' , 'sudo' }) if items and items . acetone > 2 and items . antifreeze > 4 and items . sudo > 9 then ox_inventory : RemoveItem ( source , 'acetone' , 3 ) ox_inventory : RemoveItem ( source , 'antifreeze' , 5 ) ox_inventory : RemoveItem ( source , 'sudo' , 10 ) end","title":"Getting Started"},{"location":"#dependencies","text":"","title":"Dependencies"},{"location":"#fxserver","text":"The minimum required version of FXServer is build 5053 , anything earlier will prevent the resource from starting.","title":"FXServer"},{"location":"#oxmysql","text":"We utilise our own resource to communicate with MySQL databases via the node-mysql2 package. The backend is actively maintained and updated unlike the package used by mysql-async, providing improved performance, security, and features. We provide full backwards compatibility with mysql-async and build for the current Cfx architecture. GitHub Documentation","title":"OxMySQL"},{"location":"#lua-library","text":"A resource designed to provide reusable functions that can be loaded into any resource with simple variable declarations rather than through fxmanifest. Still a work in progress. Currently used for SetInterval Server Callbacks Table utilities (contains, matches) Requesting models, animations, etc. Disabling control actions GitHub","title":"Lua Library"},{"location":"#ox-esx","text":"The inventory is being moved towards a standalone design, with compatibility for a modified version of ESX Legacy . For convenience, we provide a fork with all the necessary changes as well as several new features and performance improvements. There should be no changes which break compatibility with other resources with the exception of what is necessary to support the inventory and new item system. Loadouts do not exist, so errors may occur if a third-party resource attempts to manipulate them Inventories are slot-based and items can exist in multiple slots, which can throw off item counting Resources attempting to iterate through inventories in order will not work if a slot is empty We are in the process of converting some common ESX resources to better support our releases. Some code is being changed for later reference while a txAdmin recipe is prepared. - esx_status: fixed some bugs and rework for oxmysql - esx_addoninventory: registers addon_inventory inventories as valid stash targets Modifying your framework We do not provide a guide for manually converting your ESX to support Ox Inventory; instead you will need to manually reference changes in the github diff . This may change sometime after release when we have finalised the necessary changes. GitHub","title":"\"Ox\" ESX"},{"location":"#optional-resources","text":"","title":"Optional resources"},{"location":"#qtarget","text":"A high performance targeting solution based on bt-target, and the basis for qb-target. It is being updated alongside Ox Inventory to improve support as well as add compatibility when using QBCore or migrating from bt-target. All stashes and shops will utilise PolyZone's instead of markers to interact with them. Attention If you wish to use it first you must ensure that qtarget is enabled in the resource convars. You will need to enable compatibility manually by adjusting your config - more information provided below. You must start qtarget before the inventory and after es_extended. GitHub","title":"qtarget"},{"location":"#configuration","text":"Default inventory settings are stored in config.lua , however the recommended method of overriding them is through convars. You can either add these directly to your server.cfg , or create a file called .cfg in the resource folder. You can add these settings directly to your 'server.cfg', or create a new (or multiple) file to load with 'exec' setr ox_inventory { \"esx\": true, \"trimplate\": true, \"qtarget\": false, \"playerslots\": 50, \"blurscreen\": true, \"autoreload\": true, \"keys\": [ \"F2\", \"K\", \"TAB\" ], \"enablekeys\": [ 249 ], \"playerweight\": 30000, \"police\": \"police\", \"locale\": \"en\" } set ox_inventory_server { \"versioncheck\": true, \"clearstashes\": \"6 MONTH\", \"logs\": false, \"randomprice\": true, \"evidencegrade\": 2, \"randomloot\": true } set ox_inventory_loot { \"vehicle\": [ [\"cola\", 1, 1], [\"water\", 1, 1], [\"garbage\", 1, 2, 50], [\"panties\", 1, 1, 5], [\"money\", 1, 50], [\"money\", 200, 400, 5], [\"bandage\", 1, 1] ], \"dumpster\": [ [\"mustard\", 1, 1], [\"garbage\", 1, 3], [\"money\", 1, 10], [\"burger\", 1, 1] ] } add_principal group.admin ox_inventory add_ace resource.ox_inventory command.add_principal allow add_ace resource.ox_inventory command.remove_principal allow ensure ox_inventory","title":"Configuration"},{"location":"#installation","text":"Fresh ESX Download our fork of ESX Execute the query inside install.sql Convert ESX Download our fork of ESX Execute the query inside install.sql Open fxmanifest.lua and uncomment server_script 'setup/convert.lua' Start the server and execute the convertinventory command from the console Remove the conversion file Upgrade from Linden Inventory Execute the query inside upgrade.sql Open fxmanifest.lua and uncomment server_script 'setup/convert.lua' Start the server and execute the convertinventory linden command from the console Remove the conversion file This will not update your items file and old items may be incompatible; refer to documentation for item creation Attention You should restart your server after the first startup to ensure everything has been correctly setup","title":"Installation"},{"location":"#upgrading-esx","text":"Ox Inventory provides a complete suite of tools to replace the built-in items and inventory system from ESX, and is not intended to be used with resources designed around it. ESX loadouts do not exist - resources that use them need to remove references or be modified to look for the weapon as an item Stashes from resources such as esx_policejob, esx_ambulancejob, etc. should be removed Shops from esx_shops or the armoury from esx_policejob should be removed Resources like esx_inventoryhud, esx_trunkinventory, esx_addoninventory, etc. should be removed","title":"Upgrading ESX"},{"location":"#xplayer-vs-exportsox_inventory","text":"All item related functions from xPlayer, such as xPlayer.getInventoryItem , have been modified for compatibility purposes; however they are considered deprecated. The reasoning is fairly simple - there's now additional function references and overhead to consider. Fortunately, the new Inventory functions can be used directly and offer a great deal of improvements over the old ones. You should read through the modules section for further information, but the following should give you a decent idea. xPlayer.getInventoryItem and xPlayer.removeInventoryItem ESX if xPlayer . getInventoryItem ( 'acetone' ). count > 2 and xPlayer . getInventoryItem ( 'antifreeze' ). count > 4 and xPlayer . getInventoryItem ( 'sudo' ). count > 9 then xPlayer . removeInventoryItem ( \"acetone\" , 3 ) xPlayer . removeInventoryItem ( \"antifreeze\" , 5 ) xPlayer . removeInventoryItem ( \"sudo\" , 10 ) end Inventory Add the following code somewhere in your resource to cache the exports metatable. local ox_inventory = exports . ox_inventory You will be able to reference any functions exposed through the export. local items = ox_inventory : Search ( source , 'count' , { 'acetone' , 'antifreeze' , 'sudo' }) if items and items . acetone > 2 and items . antifreeze > 4 and items . sudo > 9 then ox_inventory : RemoveItem ( source , 'acetone' , 3 ) ox_inventory : RemoveItem ( source , 'antifreeze' , 5 ) ox_inventory : RemoveItem ( source , 'sudo' , 10 ) end","title":"xPlayer vs exports.ox_inventory"},{"location":"guides/","text":"Guides \u00b6 Example resource If you have trouble understanding how some of the inventory API works, we have created an examples resource you can reference to get an idea of how some of it may work. Building the inventory UI \u00b6 Requirements to build: Node.js Yarn Installing Node.js: Download the LTS version of Node.js from here . Go through the install and make sure you install all of the features. Run node --version in cmd and make sure that it gives you the version number. If it doesn't then you didn't install it correctly. Installing Yarn: Now that you've installed Node.js you can install Yarn by running npm install --global yarn in cmd. Building the inventory UI: cd into the web directory of ox_inventory In your cmd type yarn and in will start downloading the node modules. After it's done downloading node modules you can run yarn build to build the UI. Hot reloads When working in the browser you can run yarn start , which supports hot reloads meaning that you will see your changes after saving your file. If you want to work in game you can run yarn start:game which writes changes to disk, so the only thing you have to do is restart the resource for it take affect. Creating custom property stashes \u00b6 First we must define our stash and it's properties. Example local stash = { -- Personal stash id = 'example_stash_3' , label = 'Your Stash' , slots = 50 , weight = 100000 , owner = 'bobsmith' , } owner should be set to the identifier of the stash owner, setting it to true would make the stash personal meaning that everyone would see their own items they put in into the stash. While setting owner to false will make the stash public. After creating a table for our stash it needs to be registered in the server script of your resource. Example local GetCurrentResourceName = GetCurrentResourceName () AddEventHandler ( 'onServerResourceStart' , function ( resourceName ) if resourceName == 'ox_inventory' or resourceName == GetCurrentResourceName then Wait ( 0 ) exports . ox_inventory : RegisterStash ( stash . id , stash . label , stash . slots , stash . weight , stash . owner , stash . jobs ) end end ) We have the onServerResourceStart event handler to make sure we register the stash when ox_inventory starts or restarts to avoid no such export issues. Now that we have the stash registered we can open it with the openInventory export: Example exports . ox_inventory : openInventory ( 'stash' , 'example_stash_3' ) First param being the inventory type and the second being our unique stash id we have set. Ideally you would have a distance or zone check paired with a key check to trigger the export to open the stash.","title":"Guides"},{"location":"guides/#guides","text":"Example resource If you have trouble understanding how some of the inventory API works, we have created an examples resource you can reference to get an idea of how some of it may work.","title":"Guides"},{"location":"guides/#building-the-inventory-ui","text":"Requirements to build: Node.js Yarn Installing Node.js: Download the LTS version of Node.js from here . Go through the install and make sure you install all of the features. Run node --version in cmd and make sure that it gives you the version number. If it doesn't then you didn't install it correctly. Installing Yarn: Now that you've installed Node.js you can install Yarn by running npm install --global yarn in cmd. Building the inventory UI: cd into the web directory of ox_inventory In your cmd type yarn and in will start downloading the node modules. After it's done downloading node modules you can run yarn build to build the UI. Hot reloads When working in the browser you can run yarn start , which supports hot reloads meaning that you will see your changes after saving your file. If you want to work in game you can run yarn start:game which writes changes to disk, so the only thing you have to do is restart the resource for it take affect.","title":"Building the inventory UI"},{"location":"guides/#creating-custom-property-stashes","text":"First we must define our stash and it's properties. Example local stash = { -- Personal stash id = 'example_stash_3' , label = 'Your Stash' , slots = 50 , weight = 100000 , owner = 'bobsmith' , } owner should be set to the identifier of the stash owner, setting it to true would make the stash personal meaning that everyone would see their own items they put in into the stash. While setting owner to false will make the stash public. After creating a table for our stash it needs to be registered in the server script of your resource. Example local GetCurrentResourceName = GetCurrentResourceName () AddEventHandler ( 'onServerResourceStart' , function ( resourceName ) if resourceName == 'ox_inventory' or resourceName == GetCurrentResourceName then Wait ( 0 ) exports . ox_inventory : RegisterStash ( stash . id , stash . label , stash . slots , stash . weight , stash . owner , stash . jobs ) end end ) We have the onServerResourceStart event handler to make sure we register the stash when ox_inventory starts or restarts to avoid no such export issues. Now that we have the stash registered we can open it with the openInventory export: Example exports . ox_inventory : openInventory ( 'stash' , 'example_stash_3' ) First param being the inventory type and the second being our unique stash id we have set. Ideally you would have a distance or zone check paired with a key check to trigger the export to open the stash.","title":"Creating custom property stashes"},{"location":"issues/","text":"Unable to access the inventory \u00b6 If the inventory is not displaying after starting the resource, either an error has occurred (view the console) or you have downloaded the source code. You most likely downloaded the source code and didn't download the release zip of the inventory or you didn't build the UI. Solution Download the latest release and not the file marked -src , or build the UI manually with yarn . If the cause was an error, view the source of the error; if you are unable to determine the cause, post an issue with all relevent information (error message, the code throwing an error). Unable to access inventory after death \u00b6 You are not triggering the correct event after respawning, so the variable to store if you are dead is set as true. This is usually due to using outdated resources for ESX 1.1. Solution You can either update your resource, or trigger the following event where appropriate. TriggerEvent ( 'esx:onPlayerSpawn' )","title":"Common issues"},{"location":"issues/#unable-to-access-the-inventory","text":"If the inventory is not displaying after starting the resource, either an error has occurred (view the console) or you have downloaded the source code. You most likely downloaded the source code and didn't download the release zip of the inventory or you didn't build the UI. Solution Download the latest release and not the file marked -src , or build the UI manually with yarn . If the cause was an error, view the source of the error; if you are unable to determine the cause, post an issue with all relevent information (error message, the code throwing an error).","title":"Unable to access the inventory"},{"location":"issues/#unable-to-access-inventory-after-death","text":"You are not triggering the correct event after respawning, so the variable to store if you are dead is set as true. This is usually due to using outdated resources for ESX 1.1. Solution You can either update your resource, or trigger the following event where appropriate. TriggerEvent ( 'esx:onPlayerSpawn' )","title":"Unable to access inventory after death"},{"location":"misc/","text":"This category provides information on exports, commands, and events that are not covered under modules.","title":"Index"},{"location":"misc/client/opennearbyinventory/","text":"The target player must meet requirements to have their inventory opened. Such as (by default) being dead, restrained or surrendering. Info exports . ox_inventory : openNearbyInventory () Example The command /steal uses this functionality.","title":"OpenNearbyInventory"},{"location":"modules/","text":"Ox Inventory is organised into separate files which are loaded and stored in a single environment as modules. Most functions are included as part of a module and can only be accessed by storing a local reference to the module. This section will provide details on several functions that are utilised in several modules or available to use in other resources as exports. Note Modules are not typically usable outside of the resource; if you want to use them you need to look at the exports listed. Attention If the documentation for a function does not include an export then it is only intended for internal use.","title":"Overview"},{"location":"modules/interface/active/","text":"Returns the current state of the progress bar (active, inactive). Info Interface . ProgressActive exports . ox_inventory : ProgressActive ()","title":"Interface.ProgressActive"},{"location":"modules/interface/cancel/","text":"Cancels the current progress bar, if it can be cancelled. This function is bound to the X key with RegisterKeyMapping. Info Interface . CancelProgress () exports . ox_inventory : CancelProgress ()","title":"Interface.CancelProgress"},{"location":"modules/interface/keyboard/","text":"Window component that returns values from input fields. Info Interface . Keyboard ( header , rows ) exports . ox_inventory : Keyboard ( header , rows ) Argument Type Optional Explanation header string no Header title of the window rows table no Table of strings, each adding a new row Info The function is sync , returned value is a table if at least one input field had a value in it upon submitting, otherwise returned value is nil Example local data = Keyboard . Input ( 'Evidence Locker' , { 'Locker number' }) if data then local lockerNum = data [ 1 ] else print ( 'No value was entered into the field!' ) end","title":"Interface.Keyboard"},{"location":"modules/interface/start/","text":"Starts the progress bar and prevents some actions such as opening the inventory, reloading, etc. Info Interface . Progress ( options , completed ) exports . ox_inventory : Progress ( options , completed ) Argument Type Optional Explanation options table no Change the progress bar behaviour completed function no Callback function after completing the progress timer Options Argument Type Optional Explanation duration integer no Time it takes for the bar to callback in milliseconds label string no Text to display on progress bar useWhileDead boolean yes Able to perform an action while dead canCancel boolean yes Can cancel the progress bar anim table yes Perform an animation or scenario prop table yes Attach a prop to the player propTwo table yes Attach a prop to the player disable table yes Disable control actions while active Example Interface . Progress ({ duration = 2000 , label = 'Drinking water' , useWhileDead = false , canCancel = true , disable = { move = false , car = true , combat = true , mouse = false }, anim = { dict = 'mp_player_intdrink' , clip = 'loop_bottle' , flags = 49 , }, prop = { model = 'prop_ld_flow_bottle' , pos = { x = 0.03 , y = 0.03 , y = 0.02 }, rot = { x = 0.0 , y = 0.0 , y = - 1.5 }, bone = 58866 }, }, function ( cancel ) if not cancel then print ( \"You drank some water - that'll quench ya!\" ) end end )","title":"Interface.Progress"},{"location":"modules/inventory/customdrop/","text":"Allows server-side creation of a drop with pre-defined items and a custom prefix. Info exports . ox_inventory : CustomDrop ( prefix , items , coords , slots , maxWeight ) Argument Type Default Optional Explanation prefix string - no Label text before the drop id items table - no An array of items to add (more below) coords vector3 - no Where should the drop be created slots integer Config.PlayerSlots yes How many slots are in the drop maxWeight integer Config.DefaultWeight yes How much weight can be stored Defining items local ox_inventory = exports . ox_inventory ox_inventory : CustomDrop ( 'Carcass' , { { 'meat' , 5 , { grade = 2 , type = 'deer' }}, { 'hide' , 5 , { grade = 2 , type = 'deer' }} }, entityCoords ) Creates a \"Carcass\" drop on some supplied coordinates, containing meat and hide from a deer. Option Type Optional Explanation 1 string no Name of the item to add 2 integer no Number of items to add 3 table yes Metadata table to apply to the item","title":"Creating custom drops"},{"location":"modules/inventory/customstash/","text":"Server Stashes will not always have a defined template, so it is necessary to register them on the server before a client can request it. You only need to do this once, on script start for example. Info exports . ox_inventory : RegisterStash ( id , label , slots , maxWeight , owner ) exports . ox_inventory : RegisterStash ( 'someid' , 'Inventory label' , 10 , 10000 , true ) Argument Type Optional Explanation id str/int no A unique identifier used to access and store the stash label string no The text to display when the stash is opened slots integer no The number of slots for storing items maxWeight integer no The maximum amount of weight that can be held owner string yes The identifier of the stash owner, or true for personal stashes The reasoning for this function is to provide easier integration with other resources and prevention of arbitrarily created stashes defined by the client. Client To open a stash you are able to make use of the Open Inventory trigger. Example You can reference esx_property for a sample of utilising this export.","title":"Creating custom stashes"},{"location":"modules/inventory/client/openinventory/","text":"Trigger an event on the player to open an inventory. Info TriggerEvent ( 'ox_inventory:openInventory' , inv , data ) Argument Type Optional Explanation inv string no The inventory's type (player, shop, trunk, stash, container, policeevidence) data table no Extra information for the inventory you're opening Example Player TriggerEvent ( 'ox_inventory:openInventory' , 'player' , targetId [ int ]) TriggerClientEvent ( 'ox_inventory:openInventory' , id , 'player' , targetId [ int ]) Stash TriggerEvent ( 'ox_inventory:openInventory' , 'stash' , 'police_stash' ) TriggerClientEvent ( 'ox_inventory:openInventory' , id , 'stash' , 'police_stash' ) To open a stash you must first use RegisterStash","title":"Inventory.OpenInventory"},{"location":"modules/inventory/client/search/","text":"Returns a table containing data for the searched items, the result varying based on the provided searchtype. Info exports . ox_inventory : Search ( searchtype , items , metadata ) Argument Type Optional Explanation searchtype integer no 1: Returns slots and data, 2: Returns total count of item items table no Array of item names to search for metadata table yes Metadata pairs that must exist on the found item Items and metadata will accept a string, though it limits you to searching for metadata.type Example Single item data local ox_inventory = exports . ox_inventory local water = ox_inventory : Search ( 'slots' , 'water' ) local count = 0 for _ , v in pairs ( water ) do print ( v . slot .. ' contains ' .. v . count .. ' water ' .. json . encode ( v . metadata )) count = count + v . count end print ( 'You have ' .. count .. ' water' ) Multiple items data local ox_inventory = exports . ox_inventory local inventory = ox_inventory : Search ( 'slots' , { 'meat' , 'skin' }, 'deer' ) if inventory then for name , data in pairs ( inventory ) do local count = 0 for _ , v in pairs ( data ) do if v . slot then print ( v . slot .. ' contains ' .. v . count .. ' ' .. name .. ' ' .. json . encode ( v . metadata )) count = count + v . count end end print ( 'You have ' .. count .. ' ' .. name ) end end Single item count local ox_inventory = exports . ox_inventory local count = ox_inventory : Search ( 'count' , 'water' ) print ( 'You have ' .. count .. ' water' ) Multiple items count local ox_inventory = exports . ox_inventory local inventory = ox_inventory : Search ( 'count' , { 'meat' , 'skin' }, { grade = 1 }) if inventory then for name , count in pairs ( inventory ) do print ( 'You have ' .. count .. ' ' .. name ) end end","title":"Inventory.Search"},{"location":"modules/inventory/server/","text":"The inventory module handles most inventory-related functions and stores all current inventory data. Many of the functions provided in this module are similar to the xPlayer functions, however they can be used for non-player inventories too. Info exports . ox_inventory : Inventory ( id ) When utilising the inventory in a resource, it is recommended to store a variable to reference the inventory for performance and convenience. Example -- define an alias at the top of your script local ox_inventory = exports . ox_inventory -- give 2 water to inventory id 1 ox_inventory : AddItem ( 1 , 'water' , 2 ) -- print all items in inventory id 1 print ( json . encode ( ox_inventory : Inventory ( 1 ). items , { indent = true }))","title":"Server module"},{"location":"modules/inventory/server/additem/","text":"Adds an item to the specified inventory. Info exports . ox_inventory . AddItem ( inv , item , count , metadata , slot ) Argument Type Optional Explanation inv str/int no The id of the inventory to add an item to, such as playerid item string no Name of the item to add count integer no Number of items to add metadata table yes Metadata to assign to the given item This function should be used in combination with Inventory.CanCarryItem to ensure space is available. local ox_inventory = exports . ox_inventory ox_inventory : AddItem ( 1 , 'water' , 3 , { description = 'Looks a little yellow..' })","title":"Inventory.AddItem"},{"location":"modules/inventory/server/cancarryitem/","text":"Checks if the provided inventory is capable of holding new items. Info exports . ox_inventory . CanCarryItem ( inventory , item , count , metadata ) This function enhances the default functionality of xPlayer.canCarryItem . Argument Type Optional Explanation inv str/int no Which inventory to check item string no Name of the item count number no Number of items metadata table yes Metadata values to compare Example local ox_inventory = exports . ox_inventory local item = ox_inventory : GetItem ( 2 , 'bread' ) if item and item . count > 5 then if ox_inventory : CanCarryItem ( 1 , 'bread' 5 ) then ox_inventory : RemoveItem ( 2 , 'bread' , 5 ) ox_inventory : AddItem ( 1 , 'bread' , 5 ) else print ( ox_inventory : Inventory ( 1 ). label .. ' is unable to carry 5 bread' ) end else print ( ox_inventory : Inventory ( 2 ). label .. ' does not have 5 bread' ) end","title":"Inventory.CanCarryItem"},{"location":"modules/inventory/server/canswapitem/","text":"Checks if the provided inventory is capable of swapping out different items. Info exports . ox_inventory : CanSwapItem ( inventory , firstItem , firstItemCount , testItem , testItemCount ) This function enhances the default functionality of xPlayer.canSwapItem .","title":"Inventory.CanSwapItem"},{"location":"modules/inventory/server/clearplayerinventory/","text":"Clears the players entire inventory. Info exports . ox_inventory : ClearInventory ( inv ) Argument Type Optional Explanation inv str/int no The id of the inventory to wipe","title":"Inventory.ClearPlayerInventory"},{"location":"modules/inventory/server/create/","text":"Creates a new inventory from the given arguments. This is an internal function only. Info Inventory . Create ( id , label , type , slots , weight , maxWeight , owner , items ) Argument Type Optional Explanation id str/int no A unique identifier for the inventory to create label string yes A generic name for the inventory to display type string no The inventory's type (player, stash, etc) slots integer no Total number of unique slots weight integer no Weight of contents (usually 0) maxWeight integer no Total weight inventory can hold owner string yes Identifier for the inventory's owner items table yes Items to load into the inventory If no value is submitted for items then it will attempt to load them from the database instead. Class methods \u00b6 These functions are self-referencing, and allow setting or getting data from other resources, or triggering effects when updating a value. Info Inventory : set ( key , value ) Updates the key to reflect the new value. When closing an inventory it updates the time an inventory was last accessed, and deletes empty drops. Info Inventory : get ( key ) Gets the current value of a key. Generally not needed (you can reference Inventory.key instead). Info Inventory : minimal () Returns a \"minimal\" inventory, with most data removed. Generally used when saving to the database.","title":"Inventory.Create"},{"location":"modules/inventory/server/create/#class-methods","text":"These functions are self-referencing, and allow setting or getting data from other resources, or triggering effects when updating a value. Info Inventory : set ( key , value ) Updates the key to reflect the new value. When closing an inventory it updates the time an inventory was last accessed, and deletes empty drops. Info Inventory : get ( key ) Gets the current value of a key. Generally not needed (you can reference Inventory.key instead). Info Inventory : minimal () Returns a \"minimal\" inventory, with most data removed. Generally used when saving to the database.","title":"Class methods"},{"location":"modules/inventory/server/getitem/","text":"Searches an inventory for an item, returning generic item data and the count. Info exports . ox_inventory . GetItem ( inv , item , metadata , returnsCount ) This function enhances the default functionality of xPlayer.getInventoryItem . Argument Type Optional Explanation inv str/int no The id of the inventory to add an item to, such as playerid item string no Name of the item to get metadata table yes Specific metadata to search for returnsCount boolean yes Only return the item count Example local ox_inventory = exports . ox_inventory -- retrieve the amount of water held in inventory 1 local water = ox_inventory : GetItem ( 1 , 'water' , false , true ) if ox_inventory : GetItem ( 1 , 'money' , false , true ) < 5 then print ( '1 has less than $5' ) end","title":"Inventory.GetItem"},{"location":"modules/inventory/server/removeitem/","text":"Removes an item from the provided inventory. Info exports . ox_inventory : RemoveItem ( inv , item , count , metadata , slot ) This function enhances the default functionality of xPlayer.removeInventoryItem . Argument Type Optional Explanation inv str/int no The id of the inventory to remove the item from item string no Name of the item to remove count integer no Number of items to remove metadata table yes Required metadata for removal slot integer yes Try to remove the item from a specific slot Example local ox_inventory = exports . ox_inventory -- check if local bread = ox_inventory : GetItem ( 2 , 'bread' ) if bread . count > 4 then ox_inventory : RemoveItem ( 2 , 'bread' , 5 ) else print (( 'id 2 does only has %s %s' ): format ( bread . count , bread . label )) end","title":"Inventory.RemoveItem"},{"location":"modules/inventory/server/search/","text":"Returns a table containing data for the searched items, the result varying based on the provided searchtype. Info exports . ox_inventory : Search ( inventory , searchtype , items , metadata ) Argument Type Optional Explanation inventory str/int no The id of the inventory to search, such as playerid or a plate searchtype integer no 1: Returns slots and data, 2: Returns total count of item items table no Array of item names to search for metadata table yes Metadata pairs that must exist on the found item Items and metadata will accept a string, though it limits you to searching for metadata.type Example Single item data local ox_inventory = exports . ox_inventory local water = ox_inventory : Search ( 3 , 'slots' , 'water' ) local count = 0 for _ , v in pairs ( water ) do print ( v . slot .. ' contains ' .. v . count .. ' water ' .. json . encode ( v . metadata )) count = count + v . count end print ( 'Player 3 has ' .. count .. ' water' ) Multiple items data local ox_inventory = exports . ox_inventory local inventory = ox_inventory : Search ( 377346 , 'slots' , { 'meat' , 'skin' }, 'deer' ) if inventory then for name , data in pairs ( inventory ) do local count = 0 for _ , v in pairs ( data ) do if v . slot then print ( v . slot .. ' contains ' .. v . count .. ' ' .. name .. ' ' .. json . encode ( v . metadata )) count = count + v . count end end print ( 'Drop 377346 contains deer ' .. count .. ' ' .. name ) end end Single item count local ox_inventory = exports . ox_inventory local count = ox_inventory : Search ( 'trunk-GEZ 461' , 'count' , 'water' ) print ( 'Vehicle contains ' .. count .. ' water' ) Multiple items count local ox_inventory = exports . ox_inventory local inventory = ox_inventory : Search ( 1 , 'count' , { 'meat' , 'skin' }, { grade = 1 }) if inventory then for name , count in pairs ( inventory ) do print ( 'Player 1 has ' .. count .. ' ' .. name ) end end","title":"Inventory.Search"},{"location":"modules/inventory/server/setitem/","text":"Sets the total count of an item in the given inventory, either adding or removing as necessary. Info exports . ox_inventory : SetItem ( inventory , item , count , metadata ) This function enhances the default functionality of xPlayer.setInventoryItem .","title":"Inventory.SetItem"},{"location":"modules/inventory/server/setmetadata/","text":"Replaces the metadata table on an item with new values. Info exports . ox_inventory : SetMetadata ( source , slot , metadata ) Argument Type Optional Explanation source integer no The id of the inventory being accessed slot integer no The slot being modified metadata table no New metadata values This will replace all metadata values, so if you want to change a value you need to get the item data first. Example local ox_inventory = exports . ox_inventory local water = ox_inventory : Search ( xPlayer . source , 1 , 'water' ) for k , v in pairs ( water ) do print ( ' \\n ______________' .. ' \\n - index ' .. k ) print ( v . name , 'slot: ' .. v . slot , 'metadata: ' .. json . encode ( v . metadata )) water = v end water . metadata . type = 'clean' ox_inventory : SetMetadata ( xPlayer . source , water . slot , water . metadata ) print (( 'modified %sx water in slot %s with new metadata' ): format ( water . count , water . slot ))","title":"Inventory.SetMetadata"},{"location":"modules/items/create/","text":"All static item data is loaded from files in the data folder rather than the database. The item table defines a basic template to reference when working with an instance of that item type, and can contain custom data. Example Standard Burger A normal burger item, as it appears in data/items.lua [ 'burger' ] = { label = 'Burger' , weight = 220 , stack = true , close = true , client = { status = { hunger = 200000 }, anim = { dict = 'mp_player_inteat@burger' , clip = 'mp_player_int_eat_burger_fp' }, prop = { model = 'prop_cs_burger_01' , pos = { x = 0.02 , y = 0.02 , y = - 0.02 }, rot = { x = 0.0 , y = 0.0 , y = 0.0 } }, usetime = 2500 , } } Custom Burger A modified burger item, with a description and custom crafting table. [ 'burger' ] = { label = 'Burger' , description = 'Just what is the secret formula?' weight = 220 , stack = true , close = true , client = { status = { hunger = 200000 }, anim = { dict = 'mp_player_inteat@burger' , clip = 'mp_player_int_eat_burger_fp' }, prop = { model = 'prop_cs_burger_01' , pos = { x = 0.02 , y = 0.02 , y = - 0.02 }, rot = { x = 0.0 , y = 0.0 , y = 0.0 } }, usetime = 2500 , } crafting = { [ 'bun' ] = 2 , [ 'ketchup' ] = 1 , [ 'mustard' ] = 1 , [ 'cheese' ] = 1 , [ 'pickles' ] = 1 , [ 'lettuce' ] = 1 , [ 'tomato' ] = 1 , [ 'onion' ] = 1 , } } Combined with several new functions and events you could easily create your own crafting system. Standard options Shared Argument Optional Default Explanation label no - The display text for an item weight yes 0 The weight of an item in grams stack yes true Does the item stack with others of the same type close yes true Does the item close the inventory if used description yes - Text to display in the item tooltip consume yes 1 Number of an item needed to use it, and removed after use client yes - Options accessible only to the client server yes - Options accessible only to the server Client Argument Explanation event Trigger a client event after use status Adjust esx_status values after use anim Animation during progress bar prop Attached entity during progress bar disable Disable actions during progress bar usetime Time for progress bar to complete cancel Able to cancel progress bar","title":"Defining item data"},{"location":"modules/items/client/","text":"The client-side items module holds general item data, and provides functions when using items. Retrieve item data \u00b6 Info Items ( name ) The argument is optional and, if ignored, will return the full items list. Items = exports . ox_inventory : Items ( name ) Example local item = Items ( name ) if item then print ( item . name , item . weight ) end","title":"Client module"},{"location":"modules/items/client/#retrieve-item-data","text":"Info Items ( name ) The argument is optional and, if ignored, will return the full items list. Items = exports . ox_inventory : Items ( name ) Example local item = Items ( name ) if item then print ( item . name , item . weight ) end","title":"Retrieve item data"},{"location":"modules/items/client/usable/","text":"The recommended method for registering items as usable is adding a function to modules/items/client.lua . It is still possible to use items through ESX.RegisterUsableItem, though it is less flexible. Info Item ( name , callback ) Argument Data Type Optional Explanation name string no The name of the item to apply the function to callback function no Creates a function to be triggered when an item is used Example Sample Item ( name , function ( data , slot ) -- Trigger on use TriggerEvent ( 'ox_inventory:item' , data , function ( data ) -- Trigger after use end ) end ) Example Item ( 'bandage' , function ( data , slot ) local maxHealth = 200 local health = GetEntityHealth ( PlayerData . ped ) if health < maxHealth then TriggerEvent ( 'ox_inventory:item' , data , function ( data ) if data then SetEntityHealth ( PlayerData . ped , math.min ( maxHealth , math.floor ( health + maxHealth / 16 ))) TriggerEvent ( 'ox_inventory:notify' , { text = 'You feel better already' }) end end ) end end )","title":"Register usable items"},{"location":"modules/items/server/","text":"The server-side items module loads general item data, provides functions for manipulating items, and completes the startup process. Retrieve item data \u00b6 Info Items ( name ) The argument is optional and, if ignored, will return the full items list. Items = exports . ox_inventory : itemList ( name ) Example local item , itemtype = Items ( name ) if item then print ( item . name , item . weight , itemtype ) end Item Type Explanation nil Item 1 Weapon 2 Ammo 3 Component","title":"Server module"},{"location":"modules/items/server/#retrieve-item-data","text":"Info Items ( name ) The argument is optional and, if ignored, will return the full items list. Items = exports . ox_inventory : itemList ( name ) Example local item , itemtype = Items ( name ) if item then print ( item . name , item . weight , itemtype ) end Item Type Explanation nil Item 1 Weapon 2 Ammo 3 Component","title":"Retrieve item data"},{"location":"modules/items/server/events/","text":"It is possible to setup a function triggered by certain item \"events\". These will be triggered when an item is being used, bought, or after it was used. Info Item ( 'testburger' , function ( event , item , inventory , slot , data ) if event == 'usingItem' then if Inventory . GetItem ( inventory , item , inventory . items [ slot ]. metadata , true ) > 100 then return { inventory . label , inventory . owner , event , 'so many delicious burgers' } end elseif event == 'usedItem' then print (( '%s just ate a %s from slot %s' ): format ( inventory . label , item . label , slot )) TriggerClientEvent ( 'ox_inventory:notify' , inventory . id , { text = item . server . test }) elseif event == 'buying' then print ( data . id , data . coords , json . encode ( data . items [ slot ], { indent = true })) end end )","title":"Item events"},{"location":"modules/items/server/newmetadata/","text":"This function is used internally when adding or buying items to define metadata. You can add additional items here to give them new default values. Info Items . Metadata ( xPlayer , item , metadata , count ) | Argument | Type | Explanation | | ---------- | ----------- | | xPlayer | class | Player triggering the function | | item | table | The item being manipulated | | metadata | Extra metadata to be added to the item | | count | Number of items to be added |","title":"Defining default metadata"},{"location":"modules/utils/client/disarm/","text":"Forces the player to holster their current weapon. This should be used instead of usual natives. Info Utils . Disarm () TriggerEvent ( 'ox_inventory:disarm' ) This event is networked and can be triggered from the server.","title":"Utils.Disarm"},{"location":"modules/utils/client/notify/","text":"Triggers the builtin notification system, utilising react-hot-toast . Info Utils . Notify ( data ) exports . ox_inventory : notify ( data ) TriggerEvent ( 'ox_inventory:notify' , data ) This event is networked and can be triggered from the server. Options Explanation type undefined, success, error text Message to display duration Display time of notification position Where to display the notification style Custom CSS styling to apply Example TriggerEvent ( 'ox_inventory:notify' , { type = 'error' , text = 'Lost access to the target inventory' })","title":"Utils.Notify"},{"location":"modules/utils/client/playanim/","text":"Requests and plays an animation on the player asynchronously. Info Utils . PlayAnim ( wait , ...) Argument Type Optional Explanation wait integer no Time to wait until clearing task and animdict args any no TaskPlayAnim Example Utils . PlayAnim ( 1000 , 'pickup_object' , 'putdown_low' , 5.0 , 1.5 , 1.0 , 48 , 0.0 , 0 , 0 , 0 )","title":"Utils.PlayAnim"},{"location":"modules/utils/client/playanimadvanced/","text":"Requests and plays an advanced animation on the player asynchronously. Info Utils . PlayAnimAdvanced ( wait , ...) Argument Type Optional Explanation wait integer no Time to wait until clearing task and animdict args any no TaskPlayAnimAdvanced Example Utils . PlayAnimAdvanced ( 800 , false , 'reaction@intimidation@1h' , 'intro' , GetEntityCoords ( ESX . PlayerData . ped , true ), 0 , 0 , GetEntityHeading ( ESX . PlayerData . ped ), 8.0 , 3.0 , - 1 , 50 , 1 , 0 , 0 )","title":"Utils.PlayAnimAdvanced"}]}